#!/usr/bin/env python3
# scripts/test_moex_auto_search.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ MOEX
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from Parser.src.services.enricher.moex_auto_search import MOEXAutoSearch
from Parser.src.services.enricher.company_aliases import get_alias_manager
from Parser.src.services.enricher.ner_extractor import NERExtractor


async def test_direct_search():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("=" * 60)
    print("–¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MOEX ISS API")
    print("=" * 60)
    
    searcher = MOEXAutoSearch()
    await searcher.initialize()
    
    try:
        queries = ["–°–±–µ—Ä–±–∞–Ω–∫", "–ì–∞–∑–ø—Ä–æ–º", "–Ø–Ω–¥–µ–∫—Å", "–ü–æ–ª—é—Å", "–ù–æ—Ä–Ω–∏–∫–µ–ª—å"]
        
        for query in queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: {query}")
            results = await searcher.search_by_query(query, limit=3)
            
            if results:
                for i, result in enumerate(results, 1):
                    print(f"  {i}. {result.secid} - {result.shortname}")
                    print(f"     ISIN: {result.isin}")
                    print(f"     –¢–æ—Ä–≥—É–µ—Ç—Å—è: {'–î–∞' if result.is_traded else '–ù–µ—Ç'}")
            else:
                print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    finally:
        await searcher.close()


async def test_best_match():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
    print("=" * 60)
    
    searcher = MOEXAutoSearch()
    await searcher.initialize()
    
    try:
        companies = [
            "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –†–æ—Å—Å–∏–∏",
            "–ì—Ä—É–ø–ø–∞ –ü–ò–ö",
            "–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å",
            "X5 Retail Group",
            "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞"
        ]
        
        for company in companies:
            print(f"\nüéØ {company}")
            match = await searcher.find_best_match(company)
            
            if match:
                print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ: {match.secid} ({match.shortname})")
                print(f"    ISIN: {match.isin}")
                print(f"    –†–µ–∂–∏–º: {match.primary_boardid}")
            else:
                print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    finally:
        await searcher.close()


async def test_auto_learning():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    print("=" * 60)
    
    searcher = MOEXAutoSearch()
    await searcher.initialize()
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º NER —Å—É—â–Ω–æ—Å—Ç–∏
        ner_entities = [
            "–ü–ê–û –õ—É–∫–æ–π–ª",
            "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å",
            "–î–µ—Ç—Å–∫–∏–π –º–∏—Ä",
            "–í–¢–ë –±–∞–Ω–∫",
            "HeadHunter"
        ]
        
        print("\nüìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö...")
        
        for entity in ner_entities:
            print(f"\n  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {entity}")
            learned = await searcher.auto_learn_from_ner(entity, save_alias=True)
            
            if learned:
                print(f"    ‚úì –í—ã—É—á–µ–Ω: {learned.secid} (ISIN: {learned.isin})")
                print(f"    –ê–ª–∏–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: '{entity.lower()}' ‚Üí '{learned.secid}'")
            else:
                print(f"    ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—É—á–∏—Ç—å")
    
    finally:
        await searcher.close()


async def test_learned_aliases():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤")
    print("=" * 60)
    
    manager = get_alias_manager()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–∏–∞—Å–æ–≤:")
    print(f"  –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: {len(manager.get_all_aliases())}")
    print(f"  –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö (—Ä—É—á–Ω—ã—Ö): {len(manager.KNOWN_ALIASES)}")
    print(f"  –í—ã—É—á–µ–Ω–Ω—ã—Ö (–∞–≤—Ç–æ): {len(manager.learned_aliases)}")
    
    if manager.learned_aliases:
        print(f"\nüìù –í—ã—É—á–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã:")
        for alias, ticker in manager.learned_aliases.items():
            print(f"  '{alias}' ‚Üí {ticker}")
    else:
        print("\n  (–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤)")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ä–∞
    print(f"\nüè∑Ô∏è  –ê–ª–∏–∞—Å—ã –¥–ª—è SBER:")
    sber_aliases = manager.get_aliases_for_ticker("SBER")
    for alias in sber_aliases:
        print(f"  - {alias}")


async def test_ner_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å NER —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å NER")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ner = NERExtractor(use_ml_ner=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ regex
    searcher = MOEXAutoSearch()
    await searcher.initialize()
    
    try:
        # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏
        text = """
        –ü–ê–û "–ü–æ–ª—é—Å" —É–≤–µ–ª–∏—á–∏–ª–æ –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞ –Ω–∞ 15% –≤ —Ç—Ä–µ—Ç—å–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ 2024 –≥–æ–¥–∞.
        –ö–æ–º–ø–∞–Ω–∏—è –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –ù–∏–∫–µ–ª—å –æ–±—ä—è–≤–∏–ª–∞ –æ –Ω–æ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –≤ —ç–∫–æ–ª–æ–≥–∏—é.
        –ì–∞–∑–ø—Ä–æ–º –∑–∞–∫–ª—é—á–∏–ª –∫—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –≥–∞–∑–∞.
        –°–±–µ—Ä–±–∞–Ω–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
        """
        
        print(f"\nüì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å...")
        print(f"–¢–µ–∫—Å—Ç:\n{text[:200]}...\n")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        entities = ner.extract_entities(text)
        org_entities = [e for e in entities if e.type == "ORG"]
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π NER: {len(org_entities)}")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —Å MOEX
        print(f"\nüîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å MOEX:")
        for entity in org_entities:
            match = await searcher.find_best_match(entity.text)
            
            if match:
                print(f"\n  {entity.text}")
                print(f"    ‚Üí {match.secid} ({match.shortname})")
                print(f"    ISIN: {match.isin}")
            else:
                print(f"\n  {entity.text}")
                print(f"    ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ MOEX")
    
    finally:
        await searcher.close()


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "üöÄ" * 30)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ü–û–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –ù–ê MOEX")
    print("üöÄ" * 30)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        await test_direct_search()
        await test_best_match()
        await test_auto_learning()
        await test_learned_aliases()
        
        # NER —Ç–µ—Å—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω (–º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        try:
            await test_ner_integration()
        except Exception as e:
            print(f"\n‚ö†Ô∏è  NER —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 60)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª data/learned_aliases.json")
        print("   –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

