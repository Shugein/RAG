#!/usr/bin/env python3
# scripts/export_neo4j_dump.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neo4j
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞:
1. Cypher —Å–∫—Ä–∏–ø—Ç (CREATE/MERGE statements)
2. JSON —Ñ–æ—Ä–º–∞—Ç
3. CSV —Ñ–æ—Ä–º–∞—Ç
4. GraphML —Ñ–æ—Ä–º–∞—Ç
"""

import asyncio
import sys
import json
import csv
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from Parser.src.core.config import settings
from Parser.src.graph_models import GraphService


class Neo4jDumpExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Neo4j –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    
    def __init__(self, graph_service: GraphService):
        self.graph = graph_service
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    async def export_cypher_dump(self, output_file: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cypher —Å–∫—Ä–∏–ø—Ç–∞"""
        print(f"üìù –≠–∫—Å–ø–æ—Ä—Ç –≤ Cypher —Ñ–æ—Ä–º–∞—Ç: {output_file}")
        
        cypher_statements = []
        
        async with self.graph.driver.session() as session:
            # 1. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –∏ –∏–Ω–¥–µ–∫—Å—ã
            cypher_statements.append("-- Constraints and Indexes")
            result = await session.run("SHOW CONSTRAINTS")
            async for record in result:
                constraint_info = dict(record)
                if constraint_info.get('type') == 'UNIQUENESS':
                    cypher_statements.append(f"CREATE CONSTRAINT {constraint_info['name']} IF NOT EXISTS FOR (n:{constraint_info['labelsOrTypes'][0]}) REQUIRE n.{constraint_info['properties'][0]} IS UNIQUE;")
                elif constraint_info.get('type') == 'NODE_PROPERTY_EXISTENCE':
                    cypher_statements.append(f"CREATE CONSTRAINT {constraint_info['name']} IF NOT EXISTS FOR (n:{constraint_info['labelsOrTypes'][0]}) REQUIRE n.{constraint_info['properties'][0]} IS NOT NULL;")
            
            result = await session.run("SHOW INDEXES")
            async for record in result:
                index_info = dict(record)
                if not index_info.get('name', '').startswith('constraint_'):
                    cypher_statements.append(f"CREATE INDEX {index_info['name']} IF NOT EXISTS FOR (n:{index_info['labelsOrTypes'][0]}) ON (n.{index_info['properties'][0]});")
            
            cypher_statements.append("")
            
            # 2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
            cypher_statements.append("-- Nodes")
            node_types = await self._get_node_types(session)
            
            for node_type in node_types:
                cypher_statements.append(f"-- {node_type} nodes")
                query = f"MATCH (n:{node_type}) RETURN n"
                result = await session.run(query)
                
                async for record in result:
                    node = record['n']
                    properties = dict(node)
                    labels = list(node.labels)
                    
                    # –°–æ–∑–¥–∞–µ–º MERGE statement
                    merge_parts = [f"MERGE (n:{':'.join(labels)}"]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    id_props = []
                    for prop in ['id', 'code', 'name']:
                        if prop in properties:
                            id_props.append(f"n.{prop} = ${prop}")
                    
                    if id_props:
                        merge_parts.append(f" {{ {', '.join(id_props)} }}")
                    else:
                        merge_parts.append(" { id: $id }")
                    
                    merge_parts.append(")")
                    cypher_statements.append(" ".join(merge_parts))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º SET –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤
                    set_parts = []
                    for key, value in properties.items():
                        if value is not None:
                            if isinstance(value, str):
                                value = value.replace("'", "\\'")
                                set_parts.append(f"n.{key} = '{value}'")
                            else:
                                set_parts.append(f"n.{key} = {value}")
                    
                    if set_parts:
                        cypher_statements.append(f"SET {', '.join(set_parts)};")
                    
                    cypher_statements.append("")
            
            # 3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏
            cypher_statements.append("-- Relationships")
            relationship_types = await self._get_relationship_types(session)
            
            for rel_type in relationship_types:
                cypher_statements.append(f"-- {rel_type} relationships")
                query = f"MATCH (a)-[r:{rel_type}]->(b) RETURN a, r, b"
                result = await session.run(query)
                
                async for record in result:
                    start_node = record['a']
                    rel = record['r']
                    end_node = record['b']
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–∑–ª–æ–≤
                    start_id = self._get_node_identifier(start_node)
                    end_id = self._get_node_identifier(end_node)
                    
                    # –°–æ–∑–¥–∞–µ–º MATCH –¥–ª—è —É–∑–ª–æ–≤
                    start_labels = ':'.join(list(start_node.labels))
                    end_labels = ':'.join(list(end_node.labels))
                    
                    cypher_statements.append(f"MATCH (a:{start_labels} {{ {start_id} }})")
                    cypher_statements.append(f"MATCH (b:{end_labels} {{ {end_id} }})")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
                    rel_props = dict(rel)
                    if rel_props:
                        prop_str = ', '.join([f"{k}: {repr(v)}" for k, v in rel_props.items()])
                        cypher_statements.append(f"MERGE (a)-[r:{rel_type} {{{prop_str}}}]->(b);")
                    else:
                        cypher_statements.append(f"MERGE (a)-[r:{rel_type}]->(b);")
                    
                    cypher_statements.append("")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(cypher_statements))
        
        print(f"‚úÖ Cypher –¥–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    async def export_json_dump(self, output_file: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        print(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç: {output_file}")
        
        data = {
            "metadata": {
                "exported_at": datetime.now().isoformat(),
                "neo4j_uri": settings.NEO4J_URI,
                "database": settings.NEO4J_DATABASE
            },
            "nodes": [],
            "relationships": []
        }
        
        async with self.graph.driver.session() as session:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
            result = await session.run("MATCH (n) RETURN n")
            async for record in result:
                node = record['n']
                node_data = {
                    "id": node.element_id,
                    "labels": list(node.labels),
                    "properties": dict(node)
                }
                data["nodes"].append(node_data)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏
            result = await session.run("MATCH (a)-[r]->(b) RETURN a, r, b")
            async for record in result:
                rel = record['r']
                rel_data = {
                    "id": rel.element_id,
                    "type": rel.type,
                    "start_node": record['a'].element_id,
                    "end_node": record['b'].element_id,
                    "properties": dict(rel)
                }
                data["relationships"].append(rel_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON –¥–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    async def export_csv_dump(self, output_dir: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π)"""
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç: {output_dir}")
        
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        async with self.graph.driver.session() as session:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
            nodes_file = Path(output_dir) / f"nodes_{self.timestamp}.csv"
            with open(nodes_file, 'w', newline='', encoding='utf-8') as f:
                writer = None
                
                result = await session.run("MATCH (n) RETURN n")
                async for record in result:
                    node = record['n']
                    node_data = {
                        "id": node.element_id,
                        "labels": '|'.join(list(node.labels)),
                        **dict(node)
                    }
                    
                    if writer is None:
                        writer = csv.DictWriter(f, fieldnames=node_data.keys())
                        writer.writeheader()
                    
                    writer.writerow(node_data)
            
            print(f"‚úÖ –£–∑–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {nodes_file}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏
            rels_file = Path(output_dir) / f"relationships_{self.timestamp}.csv"
            with open(rels_file, 'w', newline='', encoding='utf-8') as f:
                writer = None
                
                result = await session.run("MATCH (a)-[r]->(b) RETURN a, r, b")
                async for record in result:
                    rel = record['r']
                    rel_data = {
                        "id": rel.element_id,
                        "type": rel.type,
                        "start_node": record['a'].element_id,
                        "end_node": record['b'].element_id,
                        **dict(rel)
                    }
                    
                    if writer is None:
                        writer = csv.DictWriter(f, fieldnames=rel_data.keys())
                        writer.writeheader()
                    
                    writer.writerow(rel_data)
            
            print(f"‚úÖ –°–≤—è–∑–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {rels_file}")
    
    async def _get_node_types(self, session) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤"""
        result = await session.run("CALL db.labels()")
        return [record['label'] for record in result]
    
    async def _get_relationship_types(self, session) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π"""
        result = await session.run("CALL db.relationshipTypes()")
        return [record['relationshipType'] for record in result]
    
    def _get_node_identifier(self, node) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∑–ª–∞ –¥–ª—è MERGE statement"""
        properties = dict(node)
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        for prop in ['id', 'code', 'name']:
            if prop in properties:
                value = properties[prop]
                if isinstance(value, str):
                    value = value.replace("'", "\\'")
                    return f"{prop}: '{value}'"
                else:
                    return f"{prop}: {value}"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º element_id
        return f"element_id: '{node.element_id}'"


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ" * 30)
    print("–≠–ö–°–ü–û–†–¢ –î–ê–ú–ü–ê NEO4J")
    print("üöÄ" * 30)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
    try:
        graph = GraphService(
            uri=settings.NEO4J_URI,
            user=settings.NEO4J_USER,
            password=settings.NEO4J_PASSWORD
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with graph.driver.session() as session:
            result = await session.run("RETURN 'Connected' as status")
            record = await result.single()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j: {record['status']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j: {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Neo4j –∑–∞–ø—É—â–µ–Ω:")
        print("   docker-compose up neo4j")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    exporter = Neo4jDumpExporter(graph)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–º–ø–æ–≤
    dump_dir = Path("dumps")
    dump_dir.mkdir(exist_ok=True)
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 1. Cypher –¥–∞–º–ø
        cypher_file = dump_dir / f"neo4j_dump_{timestamp}.cypher"
        await exporter.export_cypher_dump(str(cypher_file))
        
        # 2. JSON –¥–∞–º–ø
        json_file = dump_dir / f"neo4j_dump_{timestamp}.json"
        await exporter.export_json_dump(str(json_file))
        
        # 3. CSV –¥–∞–º–ø
        csv_dir = dump_dir / f"neo4j_dump_{timestamp}_csv"
        await exporter.export_csv_dump(str(csv_dir))
        
        print(f"\n‚úÖ –í—Å–µ –¥–∞–º–ø—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dump_dir.absolute()}")
        print(f"üìÅ Cypher: {cypher_file}")
        print(f"üìÅ JSON: {json_file}")
        print(f"üìÅ CSV: {csv_dir}")
        
        print(f"\nüí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–º–ø–∞:")
        print(f"   cypher-shell -u {settings.NEO4J_USER} -p {settings.NEO4J_PASSWORD} < {cypher_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    finally:
        await graph.close()


if __name__ == "__main__":
    asyncio.run(main())
