#!/usr/bin/env python3
# scripts/setup_neo4j.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Neo4j
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.config import settings
from src.graph_models import GraphService, News, Company, Sector, Country, NewsType, NewsSubtype


async def test_neo4j_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        graph = GraphService(
            uri=settings.NEO4J_URI,
            user=settings.NEO4J_USER,
            password=settings.NEO4J_PASSWORD
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with graph.driver.session() as session:
            result = await session.run("RETURN 'Hello Neo4j!' as message")
            record = await result.single()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {record['message']}")
        
        return graph
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Neo4j Desktop: https://neo4j.com/download/")
        print("2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Docker:")
        print("   docker run -p 7474:7474 -p 7687:7687 -e NEO4J_AUTH=neo4j/password neo4j:latest")
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Neo4j AuraDB (–æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        return None


async def create_sample_data(graph: GraphService):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with graph.driver.session() as session:
            # 1. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
            await graph.create_constraints()
            print("‚úÖ –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
            news = News(
                id="test_news_1",
                url="https://example.com/news1",
                title="–°–±–µ—Ä–±–∞–Ω–∫ –æ—Ç—á–∏—Ç–∞–ª—Å—è –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –≤ —Ç—Ä–µ—Ç—å–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ",
                text="–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–æ—Å—Ç–µ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 25% –≤ —Ç—Ä–µ—Ç—å–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ 2024 –≥–æ–¥–∞. –í—ã—Ä—É—á–∫–∞ –±–∞–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 1.2 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π.",
                lang_orig="ru",
                lang_norm="ru",
                published_at=datetime.utcnow(),
                source="test",
                news_type=NewsType.ONE_COMPANY,
                news_subtype=NewsSubtype.EARNINGS
            )
            
            await graph.upsert_news(news)
            print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
            
            # 3. –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ç–æ—Ä
            await session.run("""
                MERGE (s:Sector {
                    id: "9010",
                    name: "Banks",
                    taxonomy: "ICB",
                    level: 2,
                    parent_id: "9000",
                    description: "Banking sector"
                })
            """)
            print("‚úÖ –°–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            
            # 4. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É
            await session.run("""
                MERGE (c:Country {
                    code: "RU",
                    name: "–†–æ—Å—Å–∏—è"
                })
            """)
            print("‚úÖ –°—Ç—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # 5. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            await session.run("""
                MERGE (comp:Company {
                    id: "sber",
                    name: "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫",
                    ticker: "SBER",
                    country_code: "RU"
                })
            """)
            print("‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # 6. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
            await session.run("""
                MATCH (n:News {id: "test_news_1"})
                MATCH (s:Sector {id: "9010"})
                MATCH (c:Country {code: "RU"})
                MATCH (comp:Company {id: "sber"})
                MERGE (n)-[:ABOUT_SECTOR]->(s)
                MERGE (n)-[:ABOUT_COUNTRY]->(c)
                MERGE (n)-[:ABOUT]->(comp)
                MERGE (comp)-[:BELONGS_TO]->(s)
            """)
            print("‚úÖ –°–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


async def query_sample_data(graph: GraphService):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with graph.driver.session() as session:
            # 1. –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            print("\nüì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏:")
            result = await session.run("MATCH (n:News) RETURN n.id, n.title, n.news_type, n.news_subtype")
            async for record in result:
                print(f"  ID: {record['n.id']}")
                print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {record['n.title']}")
                print(f"  –¢–∏–ø: {record['n.news_type']}")
                print(f"  –ü–æ–¥—Ç–∏–ø: {record['n.news_subtype']}")
                print()
            
            # 2. –í—Å–µ —Å–µ–∫—Ç–æ—Ä—ã
            print("üè≠ –í—Å–µ —Å–µ–∫—Ç–æ—Ä—ã:")
            result = await session.run("MATCH (s:Sector) RETURN s.id, s.name, s.taxonomy, s.level")
            async for record in result:
                print(f"  ID: {record['s.id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {record['s.name']}, –¢–∞–∫—Å–æ–Ω–æ–º–∏—è: {record['s.taxonomy']}, –£—Ä–æ–≤–µ–Ω—å: {record['s.level']}")
            
            # 3. –í—Å–µ —Å—Ç—Ä–∞–Ω—ã
            print("\nüåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã:")
            result = await session.run("MATCH (c:Country) RETURN c.code, c.name")
            async for record in result:
                print(f"  –ö–æ–¥: {record['c.code']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {record['c.name']}")
            
            # 4. –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
            print("\nüè¢ –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
            result = await session.run("MATCH (comp:Company) RETURN comp.id, comp.name, comp.ticker, comp.country_code")
            async for record in result:
                print(f"  ID: {record['comp.id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {record['comp.name']}, –¢–∏–∫–µ—Ä: {record['comp.ticker']}, –°—Ç—Ä–∞–Ω–∞: {record['comp.country_code']}")
            
            # 5. –°–≤—è–∑–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            print("\nüîó –°–≤—è–∑–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:")
            result = await session.run("""
                MATCH (n:News)-[r]->(target)
                RETURN n.id, type(r) as relationship, labels(target) as target_type, target.id as target_id, target.name as target_name
            """)
            async for record in result:
                print(f"  {record['n.id']} -[{record['relationship']}]-> {record['target_type']} ({record['target_id']}: {record['target_name']})")
            
            # 6. –°–≤—è–∑–∏ –∫–æ–º–ø–∞–Ω–∏–π
            print("\nüè¢ –°–≤—è–∑–∏ –∫–æ–º–ø–∞–Ω–∏–π:")
            result = await session.run("""
                MATCH (comp:Company)-[r]->(target)
                RETURN comp.name, type(r) as relationship, labels(target) as target_type, target.name as target_name
            """)
            async for record in result:
                print(f"  {record['comp.name']} -[{record['relationship']}]-> {record['target_type']} ({record['target_name']})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def run_cypher_queries(graph: GraphService):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö Cypher –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüîç –ü–æ–ª–µ–∑–Ω—ã–µ Cypher –∑–∞–ø—Ä–æ—Å—ã:")
    
    queries = {
        "–í—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏": """
            MATCH (n)-[r]->(m)
            RETURN n, r, m
            LIMIT 10
        """,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∑–ª–æ–≤": """
            MATCH (n)
            RETURN labels(n) as node_type, count(n) as count
            ORDER BY count DESC
        """,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π": """
            MATCH ()-[r]->()
            RETURN type(r) as relationship_type, count(r) as count
            ORDER BY count DESC
        """,
        "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º": """
            MATCH (n:News)-[:ABOUT_SECTOR]->(s:Sector)
            RETURN s.name as sector, count(n) as news_count
            ORDER BY news_count DESC
        """,
        "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º": """
            MATCH (n:News)-[:ABOUT_COUNTRY]->(c:Country)
            RETURN c.name as country, count(n) as news_count
            ORDER BY news_count DESC
        """,
        "–ö–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º": """
            MATCH (comp:Company)-[:BELONGS_TO]->(s:Sector)
            RETURN s.name as sector, collect(comp.name) as companies
            ORDER BY size(companies) DESC
        """
    }
    
    try:
        async with graph.driver.session() as session:
            for name, query in queries.items():
                print(f"\nüìä {name}:")
                result = await session.run(query)
                async for record in result:
                    print(f"  {dict(record)}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ" * 30)
    print("–ù–ê–°–¢–†–û–ô–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NEO4J")
    print("üöÄ" * 30)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    graph = await test_neo4j_connection()
    
    if graph:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await create_sample_data(graph)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await query_sample_data(graph)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            await run_cypher_queries(graph)
            
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Neo4j Browser:")
            print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:7474")
            print(f"   2. –í–æ–π–¥–∏—Ç–µ —Å –ª–æ–≥–∏–Ω–æ–º: {settings.NEO4J_USER}")
            print(f"   3. –ü–∞—Ä–æ–ª–µ–º: {settings.NEO4J_PASSWORD}")
            print("   4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞")
            
        finally:
            await graph.close()
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Neo4j")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Neo4j –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")


if __name__ == "__main__":
    asyncio.run(main())
