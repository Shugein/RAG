"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Neo4j
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from Parser.src.graph_models import GraphService
from Parser.src.core.config import settings

async def clear_neo4j():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Neo4j"""
    print("üóëÔ∏è  Connecting to Neo4j...")
    graph_service = GraphService(
        uri=settings.NEO4J_URI,
        user=settings.NEO4J_USER,
        password=settings.NEO4J_PASSWORD
    )
    
    try:
        async with graph_service.driver.session() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
            print("üóëÔ∏è  Deleting all nodes and relationships...")
            await session.run("MATCH (n) DETACH DELETE n")
            print("‚úÖ All data deleted")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
            print("üîß Recreating constraints...")
            await graph_service.create_constraints()
            print("‚úÖ Constraints recreated")
            
    finally:
        await graph_service.close()
        print("‚úÖ Done")

if __name__ == "__main__":
    asyncio.run(clear_neo4j())
