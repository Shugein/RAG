#!/usr/bin/env python3
# scripts/test_topic_classifier.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TopicClassifier
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.services.enricher.topic_classifier import TopicClassifier, ClassificationResult
from src.services.enricher.sector_mapper import SectorMapper, SectorTaxonomy
from src.graph_models import News, Company, NewsType, NewsSubtype


async def test_sector_mapper():
    """–¢–µ—Å—Ç SectorMapper"""
    print("=" * 60)
    print("–¢–ï–°–¢ 1: SectorMapper")
    print("=" * 60)
    
    mapper = SectorMapper(SectorTaxonomy.ICB)
    
    # –¢–µ—Å—Ç –ø–æ —Ç–∏–∫–µ—Ä–∞–º
    test_tickers = ["SBER", "GAZP", "YNDX", "MGNT", "GMKN", "MTSS"]
    
    print("\nüè∑Ô∏è  –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ä–∞–º:")
    for ticker in test_tickers:
        sector = mapper.get_sector_by_ticker(ticker)
        if sector:
            print(f"  {ticker}: {sector.name} (ID: {sector.id}, Level: {sector.level})")
        else:
            print(f"  {ticker}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    test_keywords = [
        ["–±–∞–Ω–∫", "–∫—Ä–µ–¥–∏—Ç", "—Ñ–∏–Ω–∞–Ω—Å—ã"],
        ["–Ω–µ—Ñ—Ç—å", "–≥–∞–∑", "—ç–Ω–µ—Ä–≥–∏—è"],
        ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Å–æ—Ñ—Ç", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"],
        ["—Ä–∏—Ç–µ–π–ª", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–º–∞–≥–∞–∑–∏–Ω"],
        ["–º–µ—Ç–∞–ª–ª—ã", "–¥–æ–±—ã—á–∞", "—à–∞—Ö—Ç–∞"]
    ]
    
    print("\nüîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    for keywords in test_keywords:
        sector = mapper.get_sector_by_keywords(keywords)
        if sector:
            print(f"  {keywords}: {sector.name} (ID: {sector.id})")
        else:
            print(f"  {keywords}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏
    print("\nüå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞:")
    hierarchy = mapper.get_sector_hierarchy("9010")
    for parent in hierarchy["parents"]:
        print(f"  –†–æ–¥–∏—Ç–µ–ª—å: {parent.name}")
    print(f"  –¢–µ–∫—É—â–∏–π: {hierarchy['current'][0].name}")
    for child in hierarchy["children"]:
        print(f"  –î–æ—á–µ—Ä–Ω–∏–π: {child.name}")


async def test_topic_classifier():
    """–¢–µ—Å—Ç TopicClassifier"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: TopicClassifier")
    print("=" * 60)
    
    classifier = TopicClassifier(taxonomy=SectorTaxonomy.ICB)
    await classifier.initialize()
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        test_cases = [
            {
                "title": "–°–±–µ—Ä–±–∞–Ω–∫ –æ—Ç—á–∏—Ç–∞–ª—Å—è –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –≤ —Ç—Ä–µ—Ç—å–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ",
                "text": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–æ—Å—Ç–µ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 25% –≤ —Ç—Ä–µ—Ç—å–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ 2024 –≥–æ–¥–∞. –í—ã—Ä—É—á–∫–∞ –±–∞–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 1.2 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π.",
                "companies": [
                    Company(id="sber", name="–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫", ticker="SBER", country_code="RU")
                ],
                "expected_sector": "9010",  # Banks
                "expected_type": NewsType.ONE_COMPANY,
                "expected_subtype": NewsSubtype.EARNINGS
            },
            {
                "title": "–ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª –¥–æ–±—ã—á—É –≥–∞–∑–∞ –Ω–∞ 15%",
                "text": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ì–∞–∑–ø—Ä–æ–º —Å–æ–æ–±—â–∏–ª–∞ –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –¥–æ–±—ã—á–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –≥–∞–∑–∞ –Ω–∞ 15% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º.",
                "companies": [
                    Company(id="gazp", name="–ü–ê–û –ì–∞–∑–ø—Ä–æ–º", ticker="GAZP", country_code="RU")
                ],
                "expected_sector": "1010",  # Oil & Gas
                "expected_type": NewsType.ONE_COMPANY,
                "expected_subtype": None
            },
            {
                "title": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –ø–æ–∫–∞–∑–∞–ª —Ä–æ—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Å–∞–Ω–∫—Ü–∏—è—Ö",
                "text": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤ –ø–ª—é—Å–µ –Ω–∞ —Ñ–æ–Ω–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –Ω–æ–≤—ã—Ö —Å–∞–Ω–∫—Ü–∏—è—Ö –°–®–ê –ø—Ä–æ—Ç–∏–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.",
                "companies": [],
                "expected_sector": None,
                "expected_type": NewsType.MARKET,
                "expected_subtype": NewsSubtype.SANCTIONS
            },
            {
                "title": "–Ø–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
                "text": "–†–æ—Å—Å–∏–π—Å–∫–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è –Ø–Ω–¥–µ–∫—Å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –±–∞–∑–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
                "companies": [
                    Company(id="yndx", name="–Ø–Ω–¥–µ–∫—Å –ù–í", ticker="YNDX", country_code="RU")
                ],
                "expected_sector": "9510",  # Software
                "expected_type": NewsType.ONE_COMPANY,
                "expected_subtype": None
            }
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüì∞ –¢–µ—Å—Ç {i}: {case['title'][:50]}...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news = News(
                id=f"test_news_{i}",
                url=f"https://example.com/news{i}",
                title=case["title"],
                text=case["text"],
                lang_orig="ru",
                lang_norm="ru",
                published_at=datetime.utcnow(),
                source="test"
            )
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
            result = await classifier.classify_news(news, case["companies"])
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"  üè≠ –°–µ–∫—Ç–æ—Ä: {result.primary_sector} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected_sector']})")
            print(f"  üåç –°—Ç—Ä–∞–Ω–∞: {result.primary_country}")
            print(f"  üì∞ –¢–∏–ø: {result.news_type} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected_type']})")
            print(f"  üè∑Ô∏è  –ü–æ–¥—Ç–∏–ø: {result.news_subtype} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected_subtype']})")
            print(f"  üè∑Ô∏è  –¢–µ–≥–∏: {result.tags}")
            print(f"  üìä –†—ã–Ω–æ—á–Ω–∞—è: {result.is_market_wide}")
            print(f"  ‚öñÔ∏è  –†–µ–≥—É–ª—è—Ç–æ—Ä–Ω–∞—è: {result.is_regulatory}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –≤ –≥—Ä–∞—Ñ–µ
            await classifier.create_graph_relationships(news, result, case["companies"])
            print(f"  ‚úÖ –°–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –≥—Ä–∞—Ñ–µ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:")
        stats = classifier.get_stats()
        for key, value in stats.items():
            print(f"  {key}: {value}")
    
    finally:
        await classifier.close()


async def test_country_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
    print("=" * 60)
    
    classifier = TopicClassifier()
    await classifier.initialize()
    
    try:
        test_cases = [
            {
                "title": "–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏ –°–®–ê",
                "text": "–°–®–ê –≤–≤–µ–ª–∏ –Ω–æ–≤—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤. –ö–∏—Ç–∞–π –≤—ã—Ä–∞–∑–∏–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É –†–æ—Å—Å–∏–∏.",
                "expected_countries": ["RU", "US", "CN"]
            },
            {
                "title": "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Ä—ã–Ω–∫–∏ —É–ø–∞–ª–∏ –Ω–∞ —Ñ–æ–Ω–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏",
                "text": "–ù–µ–º–µ—Ü–∫–∏–µ –∞–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–ª–∏ —Ö—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü. –§—Ä–∞–Ω—Ü–∏—è –∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è —Ç–∞–∫–∂–µ –≤ –º–∏–Ω—É—Å–µ.",
                "expected_countries": ["DE", "FR", "GB"]
            },
            {
                "title": "–Ø–ø–æ–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –†–æ—Å—Å–∏–∏",
                "text": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–∫–ª—é—á–∏–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å —è–ø–æ–Ω—Å–∫–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π.",
                "expected_countries": ["RU", "JP"]
            }
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüåç –¢–µ—Å—Ç {i}: {case['title']}")
            
            news = News(
                id=f"country_test_{i}",
                url=f"https://example.com/country{i}",
                title=case["title"],
                text=case["text"],
                lang_orig="ru",
                lang_norm="ru",
                published_at=datetime.utcnow(),
                source="test"
            )
            
            result = await classifier.classify_news(news)
            
            print(f"  –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω: {result.countries_mentioned}")
            print(f"  –û—Å–Ω–æ–≤–Ω–∞—è: {result.primary_country}")
            print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {case['expected_countries']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            found_countries = set(result.countries_mentioned or [])
            expected_countries = set(case['expected_countries'])
            matches = found_countries.intersection(expected_countries)
            print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}/{len(expected_countries)}")
    
    finally:
        await classifier.close()


async def test_news_type_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    classifier = TopicClassifier()
    await classifier.initialize()
    
    try:
        test_cases = [
            {
                "title": "–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ –≤—ã–ø–ª–∞—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤",
                "text": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 25 —Ä—É–±–ª–µ–π –Ω–∞ –∞–∫—Ü–∏—é.",
                "expected_type": NewsType.ONE_COMPANY,
                "expected_subtype": NewsSubtype.EARNINGS
            },
            {
                "title": "–¶–ë –†–§ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É",
                "text": "–ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ 1 –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –¥–æ 16%.",
                "expected_type": NewsType.REGULATORY,
                "expected_subtype": None
            },
            {
                "title": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤ –ø–ª—é—Å–µ",
                "text": "–ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏ –≤—ã—Ä–æ—Å –Ω–∞ 2.5% –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.",
                "expected_type": NewsType.MARKET,
                "expected_subtype": None
            },
            {
                "title": "–•–∞–∫–µ—Ä—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                "text": "–ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–Ω–∫–∏ –ø—Ä–∏–≤–µ–ª–∞ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤.",
                "expected_type": NewsType.REGULATORY,
                "expected_subtype": NewsSubtype.HACK
            }
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüì∞ –¢–µ—Å—Ç {i}: {case['title']}")
            
            news = News(
                id=f"type_test_{i}",
                url=f"https://example.com/type{i}",
                title=case["title"],
                text=case["text"],
                lang_orig="ru",
                lang_norm="ru",
                published_at=datetime.utcnow(),
                source="test"
            )
            
            result = await classifier.classify_news(news)
            
            print(f"  –¢–∏–ø: {result.news_type} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected_type']})")
            print(f"  –ü–æ–¥—Ç–∏–ø: {result.news_subtype} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected_subtype']})")
            print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.type_confidence:.2f}")
            print(f"  –†—ã–Ω–æ—á–Ω–∞—è: {result.is_market_wide}")
            print(f"  –†–µ–≥—É–ª—è—Ç–æ—Ä–Ω–∞—è: {result.is_regulatory}")
            print(f"  –¢–µ–≥–∏: {result.tags}")
    
    finally:
        await classifier.close()


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "üöÄ" * 30)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOPIC CLASSIFIER")
    print("üöÄ" * 30)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        await test_sector_mapper()
        await test_topic_classifier()
        await test_country_classification()
        await test_news_type_classification()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 60)
        
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Neo4j –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π:")
        print("   - –°–µ–∫—Ç–æ—Ä—ã: MATCH (s:Sector) RETURN s")
        print("   - –°—Ç—Ä–∞–Ω—ã: MATCH (c:Country) RETURN c")
        print("   - –°–≤—è–∑–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: MATCH (n:News)-[r]->(target) RETURN n, r, target")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
