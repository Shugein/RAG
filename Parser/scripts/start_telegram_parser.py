# scripts/start_telegram_parser.py
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
import logging
import signal
import sys
from pathlib import Path
from typing import Optional

sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.config import settings
from src.core.database import init_db, close_db, get_db_session
from src.services.telegram_parser.client import TelegramClientManager
from src.services.telegram_parser.parser import TelegramParser
from src.services.telegram_parser.antispam import AntiSpamFilter
from src.services.enricher.enrichment_service import EnrichmentService
from src.utils.logging import setup_logging
from src.core.models import Source
from sqlalchemy import select

logger = logging.getLogger(__name__)


class TelegramParserService:
    def __init__(self, days: int = 7, realtime_mode: bool = False):
        self.client_manager = TelegramClientManager()
        self.client = None
        self.parser = None
        self.enricher = None
        self.running = False
        self.tasks = []
        self.days = days
        self.realtime_mode = realtime_mode
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await init_db()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("Initializing Telegram client...")
            self.client = await self.client_manager.initialize()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            anti_spam = AntiSpamFilter(Path("config/ad_rules.yml"))
            
            async with get_db_session() as session:
                self.parser = TelegramParser(
                    client=self.client,
                    db_session=session,
                    anti_spam=anti_spam
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enricher –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if settings.ENABLE_ENRICHMENT:
                    self.enricher = EnrichmentService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                result = await session.execute(
                    select(Source).where(
                        Source.kind == "telegram",
                        Source.enabled == True
                    )
                )
                sources = result.scalars().all()
                
                if not sources:
                    logger.warning("No active Telegram sources found")
                    return
                
                logger.info(f"Found {len(sources)} active Telegram sources")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
                if self.realtime_mode:
                    logger.info("üîÑ Running in REAL-TIME MONITORING mode")
                else:
                    logger.info(f"üìö Running in HISTORICAL LOADING mode (last {self.days} days)")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                self.running = True
                for source in sources:
                    task = asyncio.create_task(
                        self._monitor_source(source)
                    )
                    self.tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                await asyncio.gather(*self.tasks)
                
        except Exception as e:
            logger.error(f"Failed to start Telegram parser: {e}")
            raise
        finally:
            await self.stop()
    
    async def _monitor_source(self, source: Source):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        logger.info(f"Starting monitor for {source.name} ({source.code})")
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º backfill –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        async with get_db_session() as session:
            parser = TelegramParser(
                client=self.client,
                db_session=session,
                anti_spam=AntiSpamFilter()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ backfill (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
            config = source.config or {}
            if not self.realtime_mode and config.get("backfill_enabled", True):
                logger.info(f"Starting backfill for {source.code} (last {self.days} days)")
                try:
                    stats = await parser.parse_channel(
                        source=source,
                        backfill=True,
                        limit=config.get("fetch_limit", 1000),
                        days=self.days
                    )
                    logger.info(f"Backfill stats for {source.code}: {stats}")
                except Exception as e:
                    logger.error(f"Backfill failed for {source.code}: {e}")
            
            # –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ backfill
            if not self.realtime_mode:
                logger.info(f"Historical loading completed for {source.code}")
                return
        
        # –†–µ–∂–∏–º real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info(f"Starting real-time monitoring for {source.code}")
        while self.running:
            try:
                async with get_db_session() as session:
                    parser = TelegramParser(
                        client=self.client,
                        db_session=session,
                        anti_spam=AntiSpamFilter()
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    stats = await parser.parse_channel(
                        source=source,
                        backfill=False,
                        limit=10  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    )
                    
                    if stats["saved_news"] > 0:
                        logger.info(f"Processed {stats['saved_news']} new items from {source.code}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(settings.PARSER_POLL_INTERVAL)
                
            except Exception as e:
                logger.error(f"Error monitoring {source.code}: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("Stopping Telegram parser...")
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            task.cancel()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if self.client_manager:
            await self.client_manager.disconnect()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await close_db()
        
        logger.info("Telegram parser stopped")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    logger.info(f"Received signal {signum}")
    asyncio.create_task(parser_service.stop())
    sys.exit(0)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global parser_service
    
    setup_logging()
    logger.info("Starting Telegram Parser Service")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n" + "="*60)
    print("üîç –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–°–ï–†–ê –ù–û–í–û–°–¢–ï–ô")
    print("="*60)
    
    try:
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. üìö –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        print("2. üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏")
        
        mode_input = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1 –∏–ª–∏ 2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
        mode = mode_input if mode_input in ['1', '2'] else '1'
        
        if mode == '1':
            # –†–µ–∂–∏–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            print("\nüìö –†–ï–ñ–ò–ú: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
            print("-" * 40)
            
            days_input = input("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ").strip()
            days = int(days_input) if days_input else 7
            
            if days <= 0:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
                
            print(f"‚úÖ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
            realtime_mode = False
            
        else:
            # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            print("\nüîÑ –†–ï–ñ–ò–ú: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print("-" * 40)
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –ø–æ –º–µ—Ä–µ –ø–æ—è–≤–ª–µ–Ω–∏—è")
            days = 0  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            realtime_mode = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
        parser_service = TelegramParserService(days=days, realtime_mode=realtime_mode)
        
        try:
            await parser_service.start()
        except KeyboardInterrupt:
            logger.info("Received keyboard interrupt")
        except Exception as e:
            logger.error(f"Fatal error: {e}", exc_info=True)
        finally:
            await parser_service.stop()
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
        return
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return


if __name__ == "__main__":
    parser_service = None
    asyncio.run(main())