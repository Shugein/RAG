#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Entity Recognition –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ Neo4j
"""

import asyncio
import os
from datetime import datetime
from typing import List, Dict, Any
import json

from dotenv import load_dotenv
from entity_recognition import CachedFinanceNERExtractor, GraphReadyEntities, GraphDataMapper
try:
    from src.graph_models import GraphService, News as GraphNews, Company, Market, EventNode
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    class GraphService:
        def __init__(self, uri, user, password):
            pass
    
    class GraphNews:
        def __init__(self, id, url, title, text, published_at, source, lang_orig, lang_norm):
            pass


class GraphIntegrationDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Neo4j –≥—Ä–∞—Ñ–æ–º"""
    
    def __init__(self):
        load_dotenv()
        self.api_key = os.getenv('API_KEY_2')
        self.extractor = CachedFinanceNERExtractor(
            api_key=self.api_key,
            enable_caching=True
        )
        self.mapper = GraphDataMapper()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
        neo4j_uri = os.getenv('NEO4J_URI', 'bolt://localhost:7687')
        neo4j_user = os.getenv('NEO4J_USER', 'neo4j')
        neo4j_password = os.getenv('NEO4J_PASSWORD', 'password')
        
        try:
            self.graph_service = GraphService(neo4j_uri, neo4j_user, neo4j_password)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j: {neo4j_uri}")
        except Exception as e:
            print(f"‚ö†Ô∏è Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.graph_service = None
    
    async def demo_full_pipeline(self):
        """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –Ω–æ–≤–æ—Å—Ç–∏ ‚Üí —Å—É—â–Ω–æ—Å—Ç–∏ ‚Üí –≥—Ä–∞—Ñ"""
        
        print("üöÄ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø PIPELINE –î–õ–Ø –ì–†–ê–§–ê")
        print("="*60)
        
        # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        sample_news = [
            {
                'id': 'news_001',
                'url': 'https://example.com/news/001',
                'title': '–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –¥–∏–≤–∏–¥–µ–Ω–¥—ã',
                'text': """–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω—ã—Ö –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –∑–∞ 2024 –≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ 25 —Ä—É–±–ª–µ–π –Ω–∞ –∞–∫—Ü–∏—é. 
                –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Å–æ–≤–µ—Ç–æ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ì–µ—Ä–º–∞–Ω–∞ –ì—Ä–µ—Ñ–∞. 
                –í—ã–ø–ª–∞—Ç—ã —Å–æ—Å—Ç–∞–≤—è—Ç 50% –æ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –±–∞–Ω–∫–∞. –ê–∫—Ü–∏–∏ SBER –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 3.5% 
                –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.""",
                'published_at': datetime.now(),
                'source': 'finance_test'
            },
            {
                'id': 'news_002', 
                'url': 'https://example.com/news/002',
                'title': '–¶–ë –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É',
                'text': """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ 100 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ 15%. 
                –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –¶–ë –≠–ª—å–≤–∏—Ä–∞ –ù–∞–±–∏—É–ª–∏–Ω–∞ –∑–∞—è–≤–∏–ª–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏. 
                –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –°–±–µ—Ä–±–∞–Ω–∫ –∏ –í–¢–ë. 
                –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç —Å—Ç–∞–≤–æ–∫ –ø–æ –∏–ø–æ—Ç–µ—á–Ω—ã–º –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º.""",
                'published_at': datetime.now(),
                'source': 'finance_test'
            }
        ]
        
        results = []
        
        for news_item in sample_news:
            print(f"\nüì∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {news_item['title']}")
            print("-" * 50)
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ–∞
                start_time = datetime.now()
                graph_entities = self.extractor.extract_graph_entities(
                    news_item['text'], 
                    news_date=news_item['published_at'].strftime('%Y-%m-%d')
                )
                
                extraction_time = (datetime.now() - start_time).total_seconds()
                print(f"‚è±Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π: {extraction_time:.2f} —Å–µ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self._show_extraction_results(graph_entities)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Neo4j
                neo4j_data = self._prepare_neo4j_data(graph_entities, news_item['id'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥—Ä–∞—Ñ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Neo4j
                if self.graph_service:
                    await self._save_to_graph(neo4j_data, news_item)
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Neo4j –≥—Ä–∞—Ñ")
                else:
                    print("‚ö†Ô∏è Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                results.append({
                    'news_id': news_item['id'],
                    'extraction_time': extraction_time,
                    'entities_count': self._count_entities(graph_entities),
                    'graph_entities': graph_entities
                })
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                results.append({'news_id': news_item['id'], 'error': str(e)})
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._show_summary_stats(results)
        
        return results
    
    def _show_extraction_results(self, entities: GraphReadyEntities):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        
        print(f"üìç –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π:")
        print(f"  ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–π: {len(entities.companies)}")
        for c in entities.companies:
            ticker_info = f" ({c.ticker})" if c.ticker else ""
            sector_info = f" [{c.sector}]" if c.sector else ""
            print(f"    - {c.name}{ticker_info}{sector_info}")
        
        print(f"  ‚Ä¢ –ü–µ—Ä—Å–æ–Ω: {len(entities.people)}")
        for p in entities.people:
            position_info = f" - {p.position}" if p.position else ""
            company_info = f" –≤ {p.company}" if p.company else ""
            print(f"    - {p.name}{position_info}{company_info}")
        
        print(f"  ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(entities.financial_instruments)}")
        for fi in entities.financial_instruments:
            price_info = f": {fi.price}" if fi.price else ""
            change_info = f" ({fi.change_percent}%)" if fi.change_percent else ""
            print(f"    - {fi.symbol} ({fi.type}){price_info}{change_info}")
        
        print(f"  ‚Ä¢ –°–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏: {len(entities.relationships)}")
        for rel in entities.relationships:
            print(f"    - {rel.source} ‚Üí {rel.target} ({rel.relation_type})")
        
        print(f"  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(entities.causal_relations)}")
        for causal in entities.causal_relations:
            print(f"    - {causal.cause_event} ‚Üí {causal.effect_event}")
        
        print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
        print(f"  ‚Ä¢ Sentiment: {entities.sentiment_score}")
        print(f"  ‚Ä¢ –¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏: {entities.news_type}")
        print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {entities.urgency_level}")
    
    def _prepare_neo4j_data(self, entities: GraphReadyEntities, news_id: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Neo4j"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Neo4j —É–∑–ª–æ–≤
        nodes = self.mapper.map_to_neo4j_nodes(entities, news_id)
        relationships = self.mapper.map_to_neo4j_relationships(entities)
        impacts = self.mapper.map_to_impact_estimates(entities)
        
        return {
            'nodes': nodes,
            'relationships': relationships,
            'impacts': impacts
        }
    
    async def _save_to_graph(self, neo4j_data: Dict[str, Any], news_item: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Neo4j –≥—Ä–∞—Ñ"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –Ω–æ–≤–æ—Å—Ç–∏
            news_node = GraphNews(
                id=news_item['id'],
                url=news_item['url'],
                title=news_item['title'],
                text=news_item['text'],
                published_at=news_item['published_at'],
                source=news_item['source'],
                lang_orig='ru',
                lang_norm='ru'
            )
            
            await self.graph_service.create_news_node(news_node)
            
            # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∫–æ–º–ø–∞–Ω–∏–π
            for company_data in neo4j_data['nodes']['companies']:
                company_id = f"company_{hash(company_data['name'])}"
                await self.graph_service.create_company_node(
                    company_id=company_id,
                    name=company_data['name'],
                    ticker=company_data.get('ticker', ''),
                    is_traded=True
                )
                
                # –°–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
                await self.graph_service.link_news_to_company(news_item['id'], company_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            for instrument_data in neo4j_data['nodes']['financial_instruments']:
                instrument_id = f"inst_{instrument_data['exchange']}_{instrument_data['symbol']}"
                await self.graph_service.create_instrument_node(
                    instrument_id=instrument_id,
                    symbol=instrument_data['symbol'],
                    instrument_type=instrument_data['type'],
                    exchange=instrument_data.get('exchange', 'MOEX'),
                    currency='RUB'
                )
            
            # –°–æ–∑–¥–∞–µ–º —Ä—ã–Ω–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã
            if neo4j_data['nodes']['markets']:
                market_id = 'moex'
                await self.graph_service.create_market_node(
                    market_id=market_id,
                    market_name='–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞',
                    country_code='RU',
                    source='moex'
                )
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —É–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –≥—Ä–∞—Ñ: {e}")
    
    def _count_entities(self, entities: GraphReadyEntities) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        
        return {
            'companies': len(entities.companies),
            'people': len(entities.people),
            'financial_instruments': len(entities.financial_instruments),
            'relationships': len(entities.relationships),
            'temporal_events': len(entities.temporal_events),
            'causal_relations': len(entities.causal_relations),
            'impact_estimates': len(entities.impact_estimates)
        }
    
    def _show_summary_stats(self, results: List[Dict[str, Any]]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        print("\n" + "="*60)
        print("üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        
        successful_news = [r for r in results if 'error' not in r]
        failed_news = [r for r in results if 'error' in r]
        
        if successful_news:
            avg_extraction_time = sum(r['extraction_time'] for r in successful_news) / len(successful_news)
            total_entities = sum(sum(r['entities_count'].values()) for r in successful_news)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(successful_news)}/{len(results)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_extraction_time:.2f} —Å–µ–∫/–Ω–æ–≤–æ—Å—Ç—å")
            print(f"üèóÔ∏è –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {total_entities}")
            
            if failed_news:
                print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                for failed in failed_news:
                    print(f"   - {failed['news_id']}: {failed['error']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        print(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        stats = self.extractor.get_stats_summary()
        if stats['total_requests'] > 0:
            cost_per_news = stats['total_cost'] / stats['total_requests']
            print(f"   –ù–∞ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å: ${cost_per_news:.4f}")
            print(f"   –ö—ç—à-—Ö–∏—Ç—ã: {stats['cache_hit_rate_percent']:.1f}%")
            print(f"   –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {stats['token_savings_percent']:.1f}%")
    
    async def demo_batch_processing(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        print("\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø BATCH –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)
        
        # –ë–æ–ª—å—à–æ–π batch –Ω–æ–≤–æ—Å—Ç–µ–π
        batch_news = [
            f"–ö–æ–º–ø–∞–Ω–∏—è {i} –æ–±—ä—è–≤–∏–ª–∞ –æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ {100+i*10} –º–ª–Ω —Ä—É–±–ª–µ–π. –ê–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {i*0.5}%."
            for i in range(1, 16)  # 15 –Ω–æ–≤–æ—Å—Ç–µ–π
        ]
        
        print(f"üì¶ –†–∞–∑–º–µ—Ä batch: {len(batch_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        print("‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        start_time = datetime.now()
        
        try:
            results = self.extractor.extract_graph_entities_batch(
                batch_news, 
                verbose=False, 
                parallel=True
            )
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            successful = sum(1 for r in results if r is not None)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}/{len(batch_news)}")
            print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {processing_time:.2f} —Å–µ–∫")
            print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {len(batch_news)/processing_time:.1f} –Ω–æ–≤–æ—Å—Ç–µ–π/—Å–µ–∫")
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {processing_time/len(batch_news):.3f} —Å–µ–∫/–Ω–æ–≤–æ—Å—Ç—å")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ batch –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return []


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ENTITY RECOGNITION –ò –ì–†–ê–§–ê")
    print("="*80)
    
    demo = GraphIntegrationDemo()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    await demo.demo_full_pipeline()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await demo.demo_batch_processing()
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("‚úÖ Entity Recognition —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞")
    print("‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è Neo4j –≥—Ä–∞—Ñ–∞")
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ 30-50%")


if __name__ == "__main__":
    asyncio.run(main())
