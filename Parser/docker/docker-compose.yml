version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: news-postgres
    environment:
      POSTGRES_DB: newsdb
      POSTGRES_USER: newsuser
      POSTGRES_PASSWORD: newspass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newsuser -d newsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news-network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: news-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq_definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news-network

  redis:
    image: redis:7-alpine
    container_name: news-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news-network

  telegram-parser:
    build:
      context: .
      dockerfile: docker/Dockerfile.telegram
    container_name: news-telegram-parser
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://newsuser:newspass@postgres:5432/newsdb
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: INFO
    env_file:
      - .env
    volumes:
      - ./config:/app/config:ro
      - ./telethon_sessions:/app/sessions
    restart: unless-stopped
    networks:
      - news-network

  enricher:
    build:
      context: .
      dockerfile: docker/Dockerfile.enricher
    container_name: news-enricher
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://newsuser:newspass@postgres:5432/newsdb
      REDIS_URL: redis://redis:6379/1
      LOG_LEVEL: INFO
    env_file:
      - .env
    volumes:
      - ./models:/app/models:ro  # NER models
    restart: unless-stopped
    networks:
      - news-network

  outbox-relay:
    build:
      context: .
      dockerfile: docker/Dockerfile.outbox
    container_name: news-outbox-relay
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://newsuser:newspass@postgres:5432/newsdb
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      LOG_LEVEL: INFO
    restart: unless-stopped
    networks:
      - news-network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: news-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://newsuser:newspass@postgres:5432/newsdb
      REDIS_URL: redis://redis:6379/2
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - news-network

  
  neo4j:
    image: neo4j:5-community
    container_name: radar-neo4j
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
    ports:
      - "7474:7474"  # Browser
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    networks:
      - news-network


volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  neo4j_data:

networks:
  news-network:
    driver: bridge