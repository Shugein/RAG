#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ entity_recognition –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
"""

import os
import json
from dotenv import load_dotenv
from entity_recognition import CachedFinanceNERExtractor, GraphExtractedData, NewsItem

def test_new_graph_format():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    API_KEY = os.environ.get('API_KEY_2')
    
    if not API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: API_KEY_2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û –§–û–†–ú–ê–¢–ê –î–õ–Ø –ì–†–ê–§–ê")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
    extractor = CachedFinanceNERExtractor(
        api_key=API_KEY,
        enable_caching=True
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    test_news = [
        {
            "news_id": "test_001",
            "text": "–ê–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 3.2% –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –±–∞–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 389 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª. –ì–ª–∞–≤–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞ –ì–µ—Ä–º–∞–Ω –ì—Ä–µ—Ñ –∑–∞—è–≤–∏–ª –æ –ø–ª–∞–Ω–∞—Ö —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã –¥–æ 50% –æ—Ç –ø—Ä–∏–±—ã–ª–∏.",
            "title": "–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–∫–∞–∑–∞–ª —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏",
            "date": "2025-01-15",
            "source": "–†–ë–ö"
        },
        {
            "news_id": "test_002",
            "text": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 16%. –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –í–¢–ë –ö–∞–ø–∏—Ç–∞–ª –æ–∂–∏–¥–∞—é—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ –¥–æ 5.5%.",
            "title": "–¶–ë –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É",
            "date": "2025-01-15",
            "source": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç"
        },
        {
            "news_id": "test_003", 
            "text": "–ò–Ω–¥–µ–∫—Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –∑–∞–∫—Ä—ã–ª—Å—è –Ω–∞ –æ—Ç–º–µ—Ç–∫–µ 3245 –ø—É–Ω–∫—Ç–æ–≤, —á—Ç–æ –Ω–∞ 1.5%. –†–æ—Å—Ç —Å–≤—è–∑–∞–Ω —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å.",
            "title": "–ú–æ—Å–±–∏—Ä–∂–∞ –≤ –ø–ª—é—Å–µ",
            "date": "2025-01-15",
            "source": "–¢–ê–°–°"
        }
    ]
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(test_news)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        graph_data = extractor.extract_graph_entities_batch(test_news, verbose=False, parallel=True)
        
        print("\n‚úÖ –£–°–ü–ï–®–ù–û! –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("="*60)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {graph_data.total_news}")
        print(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {graph_data.summary['financial_news_count']} ({graph_data.summary['financial_news_percentage']:.1f}%)")
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {graph_data.summary['total_companies']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –ª—é–¥–µ–π: {graph_data.summary['total_people']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä—ã–Ω–∫–æ–≤: {graph_data.summary['total_markets']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìã –ü–†–ò–ú–ï–†–´ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print("-"*60)
        
        for i, news_item in enumerate(graph_data.news_items, 1):
            print(f"\n{i}. –ù–æ–≤–æ—Å—Ç—å {news_item.news_id}:")
            print(f"   –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è: {'–î–∞' if news_item.is_financial else '–ù–µ—Ç'}")
            print(f"   –°—Ç—Ä–∞–Ω–∞: {news_item.country or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
            
            if news_item.event_types:
                types_str = ', '.join([f"{et.type} ({et.confidence:.1f})" for et in news_item.event_types])
                print(f"   –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: {types_str}")
            
            if news_item.companies:
                companies_str = ', '.join([f"{c.name}" for c in news_item.companies])
                print(f"   –ö–æ–º–ø–∞–Ω–∏–∏: {companies_str}")
            
            if news_item.people:
                people_str = ', '.join([f"{p.name}" for p in news_item.people])
                print(f"   –ü–µ—Ä—Å–æ–Ω—ã: {people_str}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        result_json = graph_data.model_dump_json(indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–∞–∑–º–µ—Ä JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(result_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å JSON
        print("\nüìÑ –§–†–ê–ì–ú–ï–ù–¢ JSON:")
        print("-"*60)
        
        json_obj = json.loads(result_json)
        sample_item = json_obj['news_items'][0]
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞
        simplified = {
            "news_id": sample_item["news_id"],
            "title": sample_item["title"],
            "is_financial": sample_item["is_financial"],
            "country": sample_item["country"],
            "event_types": sample_item["event_types"],
            "companies": sample_item["companies"],
            "people": sample_item["people"]
        }
        
        print(json.dumps(simplified, ensure_ascii=False, indent=2))
        
        print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ù–û–í–û–ì–û –§–û–†–ú–ê–¢–ê:")
        print("-"*60)
        print("‚úì –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
        print("‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        print("‚úì –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (earnings, dividend –∏ —Ç.–¥.)")
        print("‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏")
        print("‚úì –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤")
        print("‚úì –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å moex_linker –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π")
        print("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞")
        
        print(f"\n‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
        stats = extractor.get_stats_summary()
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"   –¢–æ–∫–µ–Ω–æ–≤: {stats['input_tokens']} (–≤—Ö–æ–¥—è—â–∏–µ), {stats['output_tokens']} (–∏—Å—Ö–æ–¥—è—â–∏–µ)")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${stats['total_cost']:.4f}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def compare_old_vs_new():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    
    load_dotenv()
    API_KEY = os.environ.get('API_KEY_2')
    
    if not API_KEY:
        return
    
    extractor = CachedFinanceNERExtractor(api_key=API_KEY, enable_caching=True)
    
    test_text = "–°–±–µ—Ä–±–∞–Ω–∫ –æ—Ç—á–∏—Ç–∞–ª—Å—è –æ –ø—Ä–∏–±—ã–ª–∏ 389 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π. –ì–µ—Ä–º–∞–Ω –ì—Ä–µ—Ñ —É–≤–µ–ª–∏—á–∏—Ç –¥–∏–≤–∏–¥–µ–Ω–¥—ã."
    
    print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–û–í")
    print("="*60)
    
    try:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        print("üîπ –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢:")
        old_result = extractor.extract_entities(test_text)
        old_json = old_result.model_dump_json(indent=2, ensure_ascii=False)
        print(f"   –†–∞–∑–º–µ—Ä: {len(old_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ö–æ–º–ø–∞–Ω–∏–π: {len(old_result.companies)}")
        print(f"   –ü–µ—Ä—Å–æ–Ω: {len(old_result.people)}")
        print(f"   –†—ã–Ω–∫–æ–≤: {len(old_result.markets)}")
        
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        print("\nüî∏ –ù–û–í–´–ô –§–û–†–ú–ê–¢ (–¥–ª—è –≥—Ä–∞—Ñ–∞):")
        new_result = extractor.extract_graph_entities(test_text, "compare_test", "–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        new_json = new_result.model_dump_json(indent=2, ensure_ascii=False)
        print(f"   –†–∞–∑–º–µ—Ä: {len(new_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è: {new_result.is_financial}")
        print(f"   –°—Ç—Ä–∞–Ω–∞: {new_result.country}")
        print(f"   –°–µ–∫—Ç–æ—Ä—ã: {new_result.sectors}")
        print(f"   –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: {len(new_result.event_types)}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏–π: {len(new_result.companies)}")
        print(f"   –ü–µ—Ä—Å–æ–Ω: {len(new_result.people)}")
        print(f"   –†—ã–Ω–∫–æ–≤: {len(new_result.markets)}")
        
        print(f"\nüìà –†–ê–ó–ù–ò–¶–ê –í –†–ê–ó–ú–ï–†–ï: {len(new_json) - len(old_json):+d} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    success = test_new_graph_format()
    
    if success:
        compare_old_vs_new()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
