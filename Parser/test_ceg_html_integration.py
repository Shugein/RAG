# test_ceg_html_integration.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ HTML –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ CEG —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.core.database import init_db, close_db, get_db_session
from src.core.models import Source, SourceKind
from src.services.html_parser.html_parser_service import HTMLParserService
from sqlalchemy import select


async def test_html_sources_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HTML –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üîç Testing HTML sources configuration...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ë–î
            result = await session.execute(
                select(Source).where(
                    Source.kind == SourceKind.HTML,
                    Source.enabled == True
                )
            )
            html_sources = result.scalars().all()
            
            if not html_sources:
                print("‚ùå No HTML sources found in database")
                print("   Please run: python scripts/load_sources.py")
                return False
            
            print(f"   ‚úÖ Found {len(html_sources)} HTML sources:")
            for source in html_sources:
                print(f"      - {source.code}: {source.name}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error testing HTML sources: {e}")
        return False
    finally:
        await close_db()


async def test_html_parser_service():
    """–¢–µ—Å—Ç HTML parser service"""
    print("üîç Testing HTML parser service...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –°–æ–∑–¥–∞–µ–º HTML parser service
            service = HTMLParserService(session, use_local_ai=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
            parsers = service.get_available_parsers()
            print(f"   ‚úÖ Available parsers: {parsers}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –Ω–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if 'forbes' in parsers and 'interfax' in parsers:
                print("   ‚úÖ Forbes and Interfax parsers available")
            else:
                print("   ‚ùå Missing parsers for Forbes or Interfax")
                return False
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error testing HTML parser service: {e}")
        return False
    finally:
        await close_db()


async def test_ceg_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CEG —Å–∏—Å—Ç–µ–º–æ–π"""
    print("üîç Testing CEG integration...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            telegram_result = await session.execute(
                select(Source).where(
                    Source.kind == SourceKind.TELEGRAM,
                    Source.enabled == True
                )
            )
            telegram_sources = telegram_result.scalars().all()
            
            html_result = await session.execute(
                select(Source).where(
                    Source.kind == SourceKind.HTML,
                    Source.enabled == True
                )
            )
            html_sources = html_result.scalars().all()
            
            total_sources = len(telegram_sources) + len(html_sources)
            
            if total_sources == 0:
                print("   ‚ùå No active sources found")
                return False
            
            print(f"   ‚úÖ Found {len(telegram_sources)} Telegram sources")
            print(f"   ‚úÖ Found {len(html_sources)} HTML sources")
            print(f"   ‚úÖ Total sources: {total_sources}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for source in html_sources:
                config = source.config or {}
                if 'poll_interval' in config:
                    print(f"   ‚úÖ {source.code}: poll_interval = {config['poll_interval']}s")
                else:
                    print(f"   ‚ö†Ô∏è {source.code}: no poll_interval configured")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error testing CEG integration: {e}")
        return False
    finally:
        await close_db()


async def test_html_parsing_simulation():
    """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üîç Testing HTML parsing simulation...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º HTML –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            result = await session.execute(
                select(Source).where(
                    Source.kind == SourceKind.HTML,
                    Source.enabled == True
                ).limit(1)
            )
            source = result.scalar_one_or_none()
            
            if not source:
                print("   ‚ùå No HTML sources available for testing")
                return False
            
            print(f"   ‚úÖ Testing with source: {source.name} ({source.code})")
            
            # –°–æ–∑–¥–∞–µ–º HTML parser service
            service = HTMLParserService(session, use_local_ai=True)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞—Ç–µ–π
            print(f"   üîÑ Parsing up to 3 articles from {source.code}...")
            
            stats = await service.parse_specific_source(source.code, max_articles=3)
            
            if 'error' in stats:
                print(f"   ‚ùå Parsing failed: {stats['error']}")
                return False
            else:
                print(f"   ‚úÖ Parsing completed: {stats}")
                return True
            
    except Exception as e:
        print(f"‚ùå Error in HTML parsing simulation: {e}")
        return False
    finally:
        await close_db()


async def test_ceg_script_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CEG —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üîç Testing CEG script import...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CEG —Å–∫—Ä–∏–ø—Ç
        import sys
        sys.path.insert(0, str(Path("scripts")))
        
        from start_telegram_parser_ceg import TelegramParserServiceCEG
        
        print("   ‚úÖ CEG script imports successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        if hasattr(TelegramParserServiceCEG, '_monitor_html_source_batch'):
            print("   ‚úÖ HTML monitoring method found")
        else:
            print("   ‚ùå HTML monitoring method not found")
            return False
        
        if hasattr(TelegramParserServiceCEG, '_collect_html_news_batch'):
            print("   ‚úÖ HTML news collection method found")
        else:
            print("   ‚ùå HTML news collection method not found")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error importing CEG script: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Testing CEG HTML Integration")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTML –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    results.append(await test_html_sources_configuration())
    print()
    
    # –¢–µ—Å—Ç 2: HTML parser service
    results.append(await test_html_parser_service())
    print()
    
    # –¢–µ—Å—Ç 3: CEG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    results.append(await test_ceg_integration())
    print()
    
    # –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è HTML –ø–∞—Ä—Å–∏–Ω–≥–∞
    results.append(await test_html_parsing_simulation())
    print()
    
    # –¢–µ—Å—Ç 5: –ò–º–ø–æ—Ä—Ç CEG —Å–∫—Ä–∏–ø—Ç–∞
    results.append(await test_ceg_script_import())
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 50)
    print("üìä Test Results:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"   Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All tests passed! CEG HTML integration is working correctly.")
        print()
        print("‚úÖ Ready to run:")
        print("   .\start_ceg_parser.ps1")
        print("   python scripts/start_telegram_parser_ceg.py")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
