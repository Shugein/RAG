#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö HTML –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from Parser.src.core.database import get_async_session
from Parser.src.core.models import Source, SourceKind
from Parser.src.services.html_parser.html_parser_service import HTMLParserService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_extended_parsers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ HTML –ø–∞—Ä—Å–µ—Ä—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö HTML –ø–∞—Ä—Å–µ—Ä–æ–≤")
    print("=" * 60)
    
    async with get_async_session() as session:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        parser_service = HTMLParserService(session, use_local_ai=False)
        
        # –ü–æ–ª—É—á–∞–µ–º HTML –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        result = await session.execute(
            f"""
            SELECT * FROM sources 
            WHERE kind = '{SourceKind.HTML}' 
            AND enabled = true
            AND code IN ('e_disclosure', 'e_disclosure_messages', 'moex')
            ORDER BY code
            """
        )
        sources = result.fetchall()
        
        if not sources:
            print("‚ùå HTML –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ scripts/load_sources.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        print(f"üì° –ù–∞–π–¥–µ–Ω–æ {len(sources)} HTML –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        for source in sources:
            print(f"   - {source.name} ({source.code})")
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤:")
        print("-" * 40)
        
        for source in sources:
            source_code = source.code
            source_name = source.name
            
            print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º {source_name} ({source_code})")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä
                parser = parser_service.get_parser(source_code)
                if not parser:
                    print(f"   ‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {source_code}")
                    continue
                
                print(f"   ‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–∞–π–¥–µ–Ω: {type(parser).__name__}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL —Å—Ç–∞—Ç–µ–π
                print(f"   üì∞ –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç–∞—Ç–µ–π...")
                article_urls = await parser.get_article_urls(max_articles=5)
                
                if article_urls:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(article_urls)} URL —Å—Ç–∞—Ç–µ–π")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
                    test_url = article_urls[0]
                    print(f"   üìñ –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é: {test_url[:60]}...")
                    
                    article_data = await parser.parse_article(test_url)
                    
                    if article_data:
                        print(f"   ‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞:")
                        print(f"      üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_data['title'][:80]}...")
                        print(f"      üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç: {len(article_data['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"      üìÖ –î–∞—Ç–∞: {article_data.get('date', 'N/A')}")
                        print(f"      üè∑Ô∏è –ü–∞—Ä—Å–µ—Ä: {article_data.get('parser', 'N/A')}")
                        
                        if article_data.get('metadata'):
                            metadata = article_data['metadata']
                            print(f"      üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                            for key, value in metadata.items():
                                if isinstance(value, str) and len(value) > 50:
                                    value = value[:50] + "..."
                                print(f"         - {key}: {value}")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é")
                else:
                    print(f"   ‚ùå URL —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {source_code}: {e}")
                logger.exception(f"Error testing {source_code}")
                continue
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML Parser Service:")
        print("-" * 40)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º run_source
            test_source = sources[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {test_source.name}...")
            
            success = await parser_service.run_source(test_source.code)
            
            if success:
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ {test_source.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ {test_source.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = parser_service.get_stats()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:")
            for key, value in stats.items():
                print(f"   - {key}: {value}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
            logger.exception("Error testing parser service")
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 60)


async def test_parser_registry():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤:")
    print("-" * 40)
    
    async with get_async_session() as session:
        parser_service = HTMLParserService(session, use_local_ai=False)
        
        expected_parsers = [
            'forbes', 'interfax', 'edisclosure', 'moex', 'edisclosure_messages'
        ]
        
        for parser_code in expected_parsers:
            parser_class = parser_service.parser_registry.get(parser_code)
            if parser_class:
                print(f"   ‚úÖ {parser_code}: {parser_class.__name__}")
            else:
                print(f"   ‚ùå {parser_code}: –ù–ï –ù–ê–ô–î–ï–ù")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_parser_registry()
        await test_extended_parsers()
        
    except Exception as e:
        logger.error(f"Fatal error in test: {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
