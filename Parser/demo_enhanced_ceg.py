#!/usr/bin/env python3
"""
Enhanced CEG Demo Script - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π CEG —Å–∏—Å—Ç–µ–º—ã
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É Importance Score –∏ Watchers (L0/L1/L2)
"""

import asyncio
import json
import logging
import sys
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent))

from Parser.src.core.database import init_db, close_db, get_db_session
from Parser.src.core.models import News, Event
from Parser.src.services.events.ceg_realtime_service import CEGRealtimeService
from Parser.src.services.events.importance_calculator import ImportanceScoreCalculator
from Parser.src.services.events.watchers import WatchersSystem
from Parser.src.graph_models import GraphService
from Parser.src.core.config import settings
from Parser.src.utils.logging import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)


class EnhancedCEGDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è Enhanced CEG —Å Importance Score –∏ Watchers
    """
    
    def __init__(self):
        self.ceg_service = None
        self.graph_service = None
        self.session = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ Initializing Enhanced CEG Demo...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async with get_db_session() as session:
            self.session = session
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Neo4j
            self.graph_service = GraphService()
            await self.graph_service.verify_connection()
            
            # –°–æ–∑–¥–∞–µ–º CEG —Å–µ—Ä–≤–∏—Å —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ watcher'–∞–º–∏
            self.ceg_service = CEGRealtimeService(
                session=session,
                graph_service=self.graph_service,
                lookback_window=30,
                enable_watchers=True  # –í–∫–ª—é—á–∞–µ–º watcher'—ã!
            )
            
            logger.info("‚úÖ Components initialized successfully")
    
    async def demo_importance_score_calculation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ Importance Score"""
        logger.info("\nüìä Demonstrating Importance Score Calculation...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        from sqlalchemy import select
        result = await self.session.execute(
            select(Event)
            .order_by(Event.created_at.desc())
            .limit(5)
        )
        events = result.scalars().all()
        
        if not events:
            logger.warning("No events found in database for demo")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏
        importance_calc = ImportanceScoreCalculator(self.session, self.graph_service)
        
        importance_results = []
        
        for event in events:
            logger.info(f"üìà Calculating importance for event: {event.event_type}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
            importance_data = await importance_calc.calculate_importance_score(event)
            
            importance_results.append({
                'event': {
                    'id': str(event.id),
                    'type': event.event_type,
                    'title': event.title,
                    'timestamp': event.ts.isoformat(),
                    'is_anchor': event.is_anchor
                },
                'importance': importance_data
            })
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            score = importance_data['importance_score']
            novelty = importance_data['novelty']
            burst = importance_data['burst']
            credibility = importance_data['credibility']
            breadth = importance_data['breadth']
            price_impact = importance_data['price_impact']
            
            print(f"\nüéØ Event: {event.event_type}")
            print(f"   üìç Title: {event.title[:60]}...")
            print(f"   üèÜ Total Importance: {score:.3f}")
            print(f"   üÜï Novelty: {novelty:.3f} | üí• Burst: {burst:.3f}")
            print(f"   ‚úÖ Credibility: {credibility:.3f} | üåê Breadth: {breadth:.3f}")
            print(f"   üí∞ Price Impact: {price_impact:.3f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        sorted_results = sorted(importance_results, key=lambda x: x['importance']['importance_score'], reverse=True)
        
        print(f"\nüèÖ Top Events by Importance:")
        for i, result in enumerate(sorted_results[:3], 1):
            event_info = result['event']
            importance = result['importance']
            print(f"{i}. {event_info['type']}: {importance['importance_score']:.3f} (\"{event_info['title'][:40]}...\")")
        
        return importance_results
    
    async def demo_watchers_system(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã Watchers (L0/L1/L2)"""
        logger.info("\nüëÅÔ∏è Demonstrating Watchers System...")
        
        if not self.ceg_service.watchers_system:
            logger.error("Watchers system not initialized")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from sqlalchemy import select
        result = await self.session.execute(
            select(Event)
            .where(Event.event_type.in_(['sanctions', 'rate_hike', 'earnings']))
            .order_by(Event.created_at.desc())
            .limit(10)
        )
        events = result.scalars().all()
        
        if not events:
            logger.warning("No suitable events found for watchers demo")
            return
        
        print(f"\nüì° Testing {len(events)} events against L0/L1/L2 watchers...")
        
        watcher_results = []
        
        for event in events:
            logger.info(f"üîç Checking event: {event.event_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ watcher'–∞–º–∏
            watch_results = await self.ceg_service.watchers_system.check_event(event)
            
            watcher_results.append({
                'event': {
                    'id': str(event.id),
                    'type': event.event_type,
                    'title': event.title[:60] + "..."
                },
                'watchers': watch_results
            })
            
            total_triggers = watch_results['summary']['total_triggers']
            levels_triggered = watch_results['summary']['levels_triggered']
            
            if total_triggers > 0:
                print(f"\nüö® Event TRIGGERED {total_triggers} watcher(s) on levels: {', '.join(levels_triggered)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                for level_result in watch_results['level_results'].values():
                    triggered_watches = level_result.get('triggered_watches', [])
                    if triggered_watches:
                        for watch in triggered_watches:
                            print(f"   üìå Rule: {watch['rule_name']}")
                            context = watch.get('context', {})
                            importance = context.get('importance_score', 0)
                            print(f"      Importance: {importance:.3f} | Priority: HIGH")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ watcher'–æ–≤
        watcher_stats = self.ceg_service.watchers_system.get_statistics()
        
        print(f"\nüìä Watchers Statistics:")
        print(f"   Total events checked: {watcher_stats['system_statistics']['total_events_checked']}")
        print(f"   Active watches: {watcher_stats['total_active_watches']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
        watcher_stats_by_level = watcher_stats['watcher_statistics']
        for level, stats in watcher_stats_by_level.items():
            triggers = stats['statistics'].get('triggers_found', 0)
            print(f"   {level} Level: {triggers} triggers")
        
        return watcher_results
    
    async def demo_integration_scenario(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        logger.info("\nüîÑ Demonstrating Integration Scenario...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å —Å AI extraction —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        mock_news = type('MockNews', (), {
            'id': 'demo-news-' + datetime.now().strftime('%Y%m%d%H%M%S'),
            'title': '–¶–ë –†–§ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 20%',
            'text_plain': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –æ–±—ä—è–≤–∏–ª –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ 2 –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞ –¥–æ 20% –≥–æ–¥–æ–≤–æ–µ. –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ —Å–≤—è–∑–∏ —Å —É—Ö—É–¥—à–µ–Ω–∏–µ–º –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
            'published_at': datetime.utcnow(),
            'is_ad': False
        })()
        
        mock_ai_extracted = {
            'entities': [
                {'text': '–¶–ë –†–§', 'type': 'ORG', 'norm': 'Central Bank of Russia'},
                {'text': '20%', 'type': 'PCT', 'norm': {'value': 20.0, 'currency': 'yearly'}},
                {'text': '–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞', 'type': 'FIN_TERM', 'norm': 'key_rate'}
            ],
            'companies': ['–¶–ë –†–§'],
            'metrics': [{'type': 'rate_change', 'value': 2.0, 'period': 'percentage_points'}]
        }
        
        print(f"üì∞ Processing mock news: \"{mock_news.title}\"")
        
        # –ü—Ä–æ—Ü–µ—Å—Å–∏–º –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π CEG
        ceg_result = await self.ceg_service.process_news(mock_news, mock_ai_extracted)
        
        events_created = len(ceg_result.get('events', []))
        causal_links = len(ceg_result.get('causal_links', []))
        impacts_calculated = len(ceg_result.get('impacts', []))
        retroactive_links = ceg_result.get('retroactive_links', 0)
        
        print(f"\n‚ö° CEG Processing Results:")
        print(f"   üìä Events created: {events_created}")
        print(f"   üï∏Ô∏è Causal links: {causal_links}")
        print(f"   üí∞ Market impacts: {impacts_calculated}")
        print(f"   üîÑ Retroactive links: {retroactive_links}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é –∏ watcher'–∞–º–∏
        final_stats = self.ceg_service.get_stats()
        print(f"\nüìà Enhanced Stats:")
        print(f"   üìä Importance calculated: {final_stats.get('importance_calculated', 0)}")
        print(f"   üëÅÔ∏è Watchers triggered: {final_stats.get('watchers_triggered', 0)}")
        print(f"   üìä Total events: {final_stats.get('events_created', 0)}")
        print(f"   üì∞ News processed: {final_stats.get('news_processed', 0)}")
        
        return ceg_result
    
    async def demo_api_endpoints(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö API endpoints"""
        logger.info("\nüåê Summarizing new API endpoints...")
        
        print(f"\nüöÄ New Enhanced CEG API Endpoints:")
        
        print(f"\nüìä Importance Score Endpoints:")
        print(f"   GET /importance/events/{{event_id}} - Get event importance")
        print(f"   GET /importance/events?min_importance=0.7 - List events by importance")
        print(f"   GET /importance/summary?period_hours=24 - Importance statistics")
        print(f"   GET /importance/analytics/trends - Importance trends over time")
        print(f"   GET /importance/analytics/distribution - Importance distribution")
        
        print(f"\nüëÅÔ∏è Watchers System Endpoints:")
        print(f"   GET /watchers/active?watch_level=L0 - Active watchers")
        print(f"   GET /watchers/predictions?status=pending - Event predictions")
        print(f"   GET /watchers/statistics?period_hours=24 - Watchers stats")
        print(f"   GET /watchers/rules - Available watch rules")
        print(f"   GET /watchers/alerts/recent?priority=high - Recent alerts")
        print(f"   POST /watchers/cleanup-expired - Cleanup expired watchers")
        
        print(f"\nüîå Existing CEG Endpoints (Enhanced):")
        print(f"   GET /ceg/events - Events with importance scores")
        print(f"   GET /ceg/stats - Statistics including watchers")
        print(f"   GET /ceg/anchor-events - Anchor events with importance")
        print(f"   GET /ceg/events/{{id}}/causal-context - Enhanced causal context")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("üé≠ Starting Enhanced CEG Demo...")
        
        try:
            await self.initialize()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Importance Score
            importance_results = await self.demo_importance_score_calculation()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Watchers
            watcher_results = await self.demo_watchers_system()
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            integration_result = await self.demo_integration_scenario()
            
            # –û–±–∑–æ—Ä API endpoints
            await self.demo_api_endpoints()
            
            print(f"\nüéâ Enhanced CEG Demo completed successfully!")
            print(f"\nüìù Demo Summary:")
            print(f"   ‚úÖ Importance Score calculations: {len(importance_results)} events")
            print(f"   ‚úÖ Watchers system tests: {len(watcher_results)} events")
            print(f"   ‚úÖ Integration scenario: {"PASSED" if integration_result else "FAILED"}")
            print(f"   ‚úÖ API endpoints: 12 new endpoints available")
            
            logger.info("Demo completed successfully")
            
        except Exception as e:
            logger.error(f"Demo failed with error: {e}", exc_info=True)
            raise
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.graph_service:
            await self.graph_service.close()
        
        await close_db()
        logger.info("Cleanup completed")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    demo = EnhancedCEGDemo()
    await demo.run_demo()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã Demo interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Demo failed: {e}")
        sys.exit(1)
