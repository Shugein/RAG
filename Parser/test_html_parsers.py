# test_html_parsers.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from src.core.database import init_db, close_db, get_db_session
from src.core.models import Source
from src.services.html_parser.forbes_parser import ForbesParser
from src.services.html_parser.interfax_parser import InterfaxParser
from sqlalchemy import select


async def test_forbes_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Forbes"""
    print("üîç Testing Forbes parser...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ Forbes
            result = await session.execute(
                select(Source).where(Source.code == "forbes")
            )
            source = result.scalar_one_or_none()
            
            if not source:
                print("‚ùå Forbes source not found in database")
                print("   Please run: python scripts/load_sources.py")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            parser = ForbesParser(source, session)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL —Å—Ç–∞—Ç–µ–π
            print("   Getting article URLs...")
            urls = await parser.get_article_urls(max_articles=5)
            
            if not urls:
                print("‚ùå No article URLs found")
                return False
            
            print(f"   ‚úÖ Found {len(urls)} article URLs")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
            if urls:
                print("   Parsing first article...")
                article = await parser.parse_article(urls[0])
                
                if article:
                    print("   ‚úÖ Article parsed successfully")
                    print(f"      Title: {article['title'][:60]}...")
                    print(f"      Content length: {len(article['content'])} characters")
                    return True
                else:
                    print("   ‚ùå Failed to parse article")
                    return False
            
    except Exception as e:
        print(f"‚ùå Error testing Forbes parser: {e}")
        return False
    finally:
        await close_db()


async def test_interfax_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Interfax"""
    print("üîç Testing Interfax parser...")
    
    try:
        await init_db()
        
        async with get_db_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ Interfax
            result = await session.execute(
                select(Source).where(Source.code == "interfax")
            )
            source = result.scalar_one_or_none()
            
            if not source:
                print("‚ùå Interfax source not found in database")
                print("   Please run: python scripts/load_sources.py")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            parser = InterfaxParser(source, session)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL —Å—Ç–∞—Ç–µ–π
            print("   Getting article URLs...")
            urls = await parser.get_article_urls(max_articles=5)
            
            if not urls:
                print("‚ùå No article URLs found")
                return False
            
            print(f"   ‚úÖ Found {len(urls)} article URLs")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
            if urls:
                print("   Parsing first article...")
                article = await parser.parse_article(urls[0])
                
                if article:
                    print("   ‚úÖ Article parsed successfully")
                    print(f"      Title: {article['title'][:60]}...")
                    print(f"      Content length: {len(article['content'])} characters")
                    return True
                else:
                    print("   ‚ùå Failed to parse article")
                    return False
            
    except Exception as e:
        print(f"‚ùå Error testing Interfax parser: {e}")
        return False
    finally:
        await close_db()


async def test_parser_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("üîç Testing HTML parser service...")
    
    try:
        from src.services.html_parser.html_parser_service import HTMLParserService
        
        await init_db()
        
        async with get_db_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            service = HTMLParserService(session, use_local_ai=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
            parsers = service.get_available_parsers()
            print(f"   ‚úÖ Available parsers: {parsers}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            print("   Testing Forbes source parsing...")
            stats = await service.parse_specific_source("forbes", max_articles=3)
            
            if 'error' in stats:
                print(f"   ‚ùå Error: {stats['error']}")
                return False
            else:
                print(f"   ‚úÖ Forbes parsing completed: {stats}")
                return True
            
    except Exception as e:
        print(f"‚ùå Error testing parser service: {e}")
        return False
    finally:
        await close_db()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Testing HTML Parsers Integration")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: Forbes parser
    results.append(await test_forbes_parser())
    print()
    
    # –¢–µ—Å—Ç 2: Interfax parser
    results.append(await test_interfax_parser())
    print()
    
    # –¢–µ—Å—Ç 3: Parser service
    results.append(await test_parser_service())
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 50)
    print("üìä Test Results:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"   Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All tests passed! Integration is working correctly.")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
