"""Initial migration

Revision ID: 6c004e7717e3
Revises: 
Create Date: 2025-10-05 01:56:15.002212

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6c004e7717e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company_aliases',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('secid', sa.String(length=50), nullable=False),
    sa.Column('alias', sa.String(length=200), nullable=False),
    sa.Column('alias_normalized', sa.String(length=200), nullable=False),
    sa.Column('lang', sa.String(length=10), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('alias_normalized', 'secid', name='uq_alias_secid')
    )
    op.create_index('idx_company_aliases_normalized', 'company_aliases', ['alias_normalized'], unique=False)
    op.create_index('idx_company_aliases_secid', 'company_aliases', ['secid'], unique=False)
    op.create_table('images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sha256', sa.CHAR(length=64), nullable=False),
    sa.Column('mime_type', sa.String(length=50), nullable=False),
    sa.Column('bytes', postgresql.BYTEA(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('thumbnail', postgresql.BYTEA(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sha256')
    )
    op.create_index('idx_images_sha256', 'images', ['sha256'], unique=False)
    op.create_table('sector_constituents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sector_code', sa.String(length=50), nullable=False),
    sa.Column('secid', sa.String(length=50), nullable=False),
    sa.Column('isin', sa.String(length=20), nullable=True),
    sa.Column('board', sa.String(length=20), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sector_code', 'secid', name='uq_sector_secid')
    )
    op.create_index('idx_sector_constituents_secid', 'sector_constituents', ['secid'], unique=False)
    op.create_index('idx_sector_constituents_sector', 'sector_constituents', ['sector_code'], unique=False)
    op.create_table('sources',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('kind', sa.String(length=20), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('base_url', sa.Text(), nullable=True),
    sa.Column('tg_chat_id', sa.String(length=100), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('trust_level', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_index('idx_sources_kind_enabled', 'sources', ['kind', 'enabled'], unique=False)
    op.create_table('news',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('external_id', sa.String(length=500), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('text_html', sa.Text(), nullable=True),
    sa.Column('text_plain', sa.Text(), nullable=True),
    sa.Column('lang', sa.String(length=10), nullable=True),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('detected_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('hash_content', sa.CHAR(length=64), nullable=True),
    sa.Column('is_updated', sa.Boolean(), nullable=True),
    sa.Column('is_ad', sa.Boolean(), nullable=True),
    sa.Column('ad_score', sa.Float(), nullable=True),
    sa.Column('ad_reasons', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('detailed_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tsv', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_id', 'external_id', name='uq_source_external_id')
    )
    op.create_index('idx_news_detailed_json', 'news', ['detailed_json'], unique=False)
    op.create_index('idx_news_hash_content', 'news', ['hash_content'], unique=False)
    op.create_index('idx_news_published_at', 'news', ['published_at'], unique=False)
    op.create_index('idx_news_source_published', 'news', ['source_id', 'published_at'], unique=False)
    op.create_index('idx_news_tsv', 'news', ['tsv'], unique=False)
    op.create_table('parser_states',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('last_parsed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_external_id', sa.String(length=500), nullable=True),
    sa.Column('cursor_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('backfill_completed', sa.Boolean(), nullable=True),
    sa.Column('backfill_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('backfill_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('last_error_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_id')
    )
    op.create_index('idx_parser_states_source', 'parser_states', ['source_id'], unique=False)
    op.create_table('entities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('news_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('norm', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('start_pos', sa.Integer(), nullable=True),
    sa.Column('end_pos', sa.Integer(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_entities_news_type', 'entities', ['news_id', 'type'], unique=False)
    op.create_index('idx_entities_type', 'entities', ['type'], unique=False)
    op.create_table('events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('news_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('attrs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_anchor', sa.Boolean(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_events_is_anchor', 'events', ['is_anchor'], unique=False)
    op.create_index('idx_events_news', 'events', ['news_id'], unique=False)
    op.create_index('idx_events_ts', 'events', ['ts'], unique=False)
    op.create_index('idx_events_type', 'events', ['event_type'], unique=False)
    op.create_index('idx_events_type_ts', 'events', ['event_type', 'ts'], unique=False)
    op.create_table('news_images',
    sa.Column('news_id', sa.UUID(), nullable=True),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('ord', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('news_id', 'image_id', name='uq_news_image')
    )
    op.create_table('outbox',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('aggregate_id', sa.UUID(), nullable=True),
    sa.Column('payload_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['aggregate_id'], ['news.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_outbox_created_at', 'outbox', ['created_at'], unique=False)
    op.create_index('idx_outbox_status_next_retry', 'outbox', ['status', 'next_retry_at'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('news_id', sa.UUID(), nullable=False),
    sa.Column('topic', sa.String(length=50), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('news_id', 'topic', name='uq_news_topic')
    )
    op.create_index('idx_topics_news', 'topics', ['news_id'], unique=False)
    op.create_index('idx_topics_topic', 'topics', ['topic'], unique=False)
    op.create_table('event_importance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('importance_score', sa.Float(), nullable=False),
    sa.Column('novelty', sa.Float(), nullable=False),
    sa.Column('burst', sa.Float(), nullable=False),
    sa.Column('credibility', sa.Float(), nullable=False),
    sa.Column('breadth', sa.Float(), nullable=False),
    sa.Column('price_impact', sa.Float(), nullable=False),
    sa.Column('components_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('calculation_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('weights_version', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_event_importance_event_id', 'event_importance', ['event_id'], unique=False)
    op.create_index('ix_event_importance_score', 'event_importance', ['importance_score'], unique=False)
    op.create_index('ix_event_importance_timestamp', 'event_importance', ['calculation_timestamp'], unique=False)
    op.create_table('linked_companies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('news_id', sa.UUID(), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=True),
    sa.Column('secid', sa.String(length=50), nullable=True),
    sa.Column('isin', sa.String(length=20), nullable=True),
    sa.Column('board', sa.String(length=20), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('short_name', sa.String(length=100), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('is_traded', sa.Boolean(), nullable=True),
    sa.Column('match_method', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['entity_id'], ['entities.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['news_id'], ['news.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_linked_companies_isin', 'linked_companies', ['isin'], unique=False)
    op.create_index('idx_linked_companies_news', 'linked_companies', ['news_id'], unique=False)
    op.create_index('idx_linked_companies_secid', 'linked_companies', ['secid'], unique=False)
    op.create_table('triggered_watches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rule_id', sa.String(length=100), nullable=False),
    sa.Column('rule_name', sa.String(length=200), nullable=False),
    sa.Column('watch_level', sa.String(length=10), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('trigger_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('auto_expire_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('notifications_sent', sa.Boolean(), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('alerts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('notified_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_triggered_watches_event_id', 'triggered_watches', ['event_id'], unique=False)
    op.create_index('ix_triggered_watches_level', 'triggered_watches', ['watch_level'], unique=False)
    op.create_index('ix_triggered_watches_rule_id', 'triggered_watches', ['rule_id'], unique=False)
    op.create_index('ix_triggered_watches_status', 'triggered_watches', ['status'], unique=False)
    op.create_index('ix_triggered_watches_trigger_time', 'triggered_watches', ['trigger_time'], unique=False)
    op.create_table('event_predictions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('watch_id', sa.UUID(), nullable=False),
    sa.Column('base_event_id', sa.UUID(), nullable=False),
    sa.Column('predicted_event_type', sa.String(length=100), nullable=False),
    sa.Column('prediction_probability', sa.Float(), nullable=False),
    sa.Column('prediction_window_days', sa.Integer(), nullable=False),
    sa.Column('target_date_estimate', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('fulfilled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_event_id', sa.UUID(), nullable=True),
    sa.Column('prediction_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['actual_event_id'], ['events.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['base_event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['watch_id'], ['triggered_watches.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_event_predictions_base_event_id', 'event_predictions', ['base_event_id'], unique=False)
    op.create_index('ix_event_predictions_status', 'event_predictions', ['status'], unique=False)
    op.create_index('ix_event_predictions_target_date', 'event_predictions', ['target_date_estimate'], unique=False)
    op.create_index('ix_event_predictions_watch_id', 'event_predictions', ['watch_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_event_predictions_watch_id', table_name='event_predictions')
    op.drop_index('ix_event_predictions_target_date', table_name='event_predictions')
    op.drop_index('ix_event_predictions_status', table_name='event_predictions')
    op.drop_index('ix_event_predictions_base_event_id', table_name='event_predictions')
    op.drop_table('event_predictions')
    op.drop_index('ix_triggered_watches_trigger_time', table_name='triggered_watches')
    op.drop_index('ix_triggered_watches_status', table_name='triggered_watches')
    op.drop_index('ix_triggered_watches_rule_id', table_name='triggered_watches')
    op.drop_index('ix_triggered_watches_level', table_name='triggered_watches')
    op.drop_index('ix_triggered_watches_event_id', table_name='triggered_watches')
    op.drop_table('triggered_watches')
    op.drop_index('idx_linked_companies_secid', table_name='linked_companies')
    op.drop_index('idx_linked_companies_news', table_name='linked_companies')
    op.drop_index('idx_linked_companies_isin', table_name='linked_companies')
    op.drop_table('linked_companies')
    op.drop_index('ix_event_importance_timestamp', table_name='event_importance')
    op.drop_index('ix_event_importance_score', table_name='event_importance')
    op.drop_index('ix_event_importance_event_id', table_name='event_importance')
    op.drop_table('event_importance')
    op.drop_index('idx_topics_topic', table_name='topics')
    op.drop_index('idx_topics_news', table_name='topics')
    op.drop_table('topics')
    op.drop_index('idx_outbox_status_next_retry', table_name='outbox')
    op.drop_index('idx_outbox_created_at', table_name='outbox')
    op.drop_table('outbox')
    op.drop_table('news_images')
    op.drop_index('idx_events_type_ts', table_name='events')
    op.drop_index('idx_events_type', table_name='events')
    op.drop_index('idx_events_ts', table_name='events')
    op.drop_index('idx_events_news', table_name='events')
    op.drop_index('idx_events_is_anchor', table_name='events')
    op.drop_table('events')
    op.drop_index('idx_entities_type', table_name='entities')
    op.drop_index('idx_entities_news_type', table_name='entities')
    op.drop_table('entities')
    op.drop_index('idx_parser_states_source', table_name='parser_states')
    op.drop_table('parser_states')
    op.drop_index('idx_news_tsv', table_name='news')
    op.drop_index('idx_news_source_published', table_name='news')
    op.drop_index('idx_news_published_at', table_name='news')
    op.drop_index('idx_news_hash_content', table_name='news')
    op.drop_index('idx_news_detailed_json', table_name='news')
    op.drop_table('news')
    op.drop_index('idx_sources_kind_enabled', table_name='sources')
    op.drop_table('sources')
    op.drop_index('idx_sector_constituents_sector', table_name='sector_constituents')
    op.drop_index('idx_sector_constituents_secid', table_name='sector_constituents')
    op.drop_table('sector_constituents')
    op.drop_index('idx_images_sha256', table_name='images')
    op.drop_table('images')
    op.drop_index('idx_company_aliases_secid', table_name='company_aliases')
    op.drop_index('idx_company_aliases_normalized', table_name='company_aliases')
    op.drop_table('company_aliases')
    # ### end Alembic commands ###
