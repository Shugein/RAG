from __future__ import annotations
from html import escape
from typing import Dict, Any, List, Tuple
from pathlib import Path

# –ú–∞–ø–ø–∏–Ω–≥–∏ "–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤" –∫ —á–∏—Ç–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —ç–º–æ–¥–∑–∏
VARIANT_TITLES = {
    "article_draft": ("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å—Ç–∞—Ç—å–∏", "üì∞"),
    "social_post": ("–°–æ—Ü–ø–æ—Å—Ç", "‚úçÔ∏è"),
    "alert": ("–ê–ª–µ—Ä—Ç", "üîî"),
    "digest": ("–î–∞–π–¥–∂–µ—Å—Ç", "üìä"),
    "timeline": ("–¢–∞–π–º–ª–∞–π–Ω", "üóìÔ∏è"),
    "scenario_table": ("–°—Ü–µ–Ω–∞—Ä–∏–∏", "üìë"),
    "graph_connections": ("–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π", "üåê"),
    "explainer_post": ("–ü–æ—è—Å–Ω–µ–Ω–∏–µ", "üìù"),
    "longread": ("–õ–æ–Ω–≥—Ä–∏–¥", "üìö"),
    "infographic_post": ("–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞", "üìà"),
}

def _nl2p(text: str) -> str:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ <p> –∞–±–∑–∞—Ü—ã, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è HTML."""
    if not text:
        return ""
    parts = [f"<p>{escape(x.strip())}</p>" for x in text.strip().split("\n") if x.strip()]
    return "\n".join(parts)

def _list_to_ul(items: List[str]) -> str:
    if not items:
        return ""
    li = "\n".join(f"<li>{escape(x)}</li>" for x in items if str(x).strip())
    return f"<ul class='bullet'>{li}</ul>"

def _render_sources(sources: List[Dict[str, Any]]) -> str:
    if not sources:
        return "<p class='muted'>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>"
    lis = []
    for s in sources:
        title = s.get("title") or s.get("url") or "–ò—Å—Ç–æ—á–Ω–∏–∫"
        url = s.get("url")
        if url:
            lis.append(f"<li><a href='{escape(url)}' target='_blank' rel='noopener'>{escape(title)}</a></li>")
        else:
            lis.append(f"<li>{escape(title)}</li>")
    return f"<ul class='sources'>{''.join(lis)}</ul>"

def _render_hashtags(tags: List[str]) -> str:
    if not tags:
        return ""
    chips = "".join(f"<span class='chip'>#{escape(t.lstrip('#'))}</span>" for t in tags if str(t).strip())
    return f"<div class='tags'>{chips}</div>"

def _render_flags(flags: List[str]) -> str:
    if not flags:
        return ""
    chips = "".join(f"<span class='flag'>{escape(f)}</span>" for f in flags if str(f).strip())
    return f"<div class='flags'>{chips}</div>"

def _render_variants(variants: Dict[str, str]) -> Tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –¥–≤—É—Ö –±–ª–æ–∫–æ–≤:
       1) –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å article_draft),
       2) —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    main_html = ""
    cards_html = []

    for key, content in variants.items():
        title, emoji = VARIANT_TITLES.get(key, (key, "üß©"))
        block = (
            f"<div class='card'>"
            f"  <div class='card-h'>{emoji} {escape(title)}</div>"
            f"  <div class='card-b'>{_nl2p(content)}</div>"
            f"</div>"
        )
        if key == "article_draft":
            main_html = block
        else:
            cards_html.append(block)

    grid_html = f"<div class='grid-cards'>{''.join(cards_html)}</div>" if cards_html else ""
    return main_html, grid_html

def render_article_html(draft: Dict[str, Any]) -> str:
    """–°–≤–µ—Ç–ª–∞—è –≤–µ—Ä—Å–∏—è: –±–µ–ª—ã–π —Ñ–æ–Ω, –±–µ–∑ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã –∏ –±–µ–∑ —Å–µ–∫—Ü–∏–∏ —Ç–µ–≥–æ–≤/–º–µ—Ç–∞-–±–µ–π–¥–∂–µ–π."""
    headline = draft.get("headline") or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    dek = draft.get("dek") or ""
    variants = draft.get("variants") or {}
    key_points = draft.get("key_points") or []
    # –ò–°–ö–õ–Æ–ß–ê–ï–ú —Ö—ç—à—Ç–µ–≥–∏ —Ü–µ–ª–∏–∫–æ–º
    # hashtags = draft.get("hashtags") or []
    vis_ideas = draft.get("visualization_ideas") or []
    flags = draft.get("compliance_flags") or []
    disclaimer = draft.get("disclaimer") or ""
    sources = draft.get("sources") or []
    # –ò–°–ö–õ–Æ–ß–ê–ï–ú –º–µ—Ç–∞-—Ç–µ–≥–∏ —Ü–µ–ª–∏–∫–æ–º
    # meta = draft.get("metadata") or {}

    main_variant_html, other_variants_html = _render_variants(variants)

    html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>{escape(headline)}</title>
<style>
:root {{
  --bg: #ffffff;
  --panel: #ffffff;
  --ink: #111111;
  --muted: #555555;
  --brand: #1b4fd6;
  --border: #dddddd;
  --radius: 14px;
  --maxw: 980px;
}}
* {{ box-sizing: border-box; }}
body {{
  margin: 0;
  background: var(--bg);
  color: var(--ink);
  font: 16px/1.6 system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial, sans-serif;
}}
.container {{ max-width: var(--maxw); margin: 40px auto; padding: 0 20px; }}
.article {{
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  padding: 28px;
}}
h1.title {{ font-size: 32px; line-height: 1.2; margin: 0 0 8px; }}
.dek {{ color: var(--muted); font-size: 18px; margin: 0 0 18px; }}
.section-h {{
  margin: 28px 0 12px; font-weight: 700; letter-spacing: .2px; font-size: 14px;
  text-transform: uppercase; color: #333;
}}
ul.bullet {{ margin: 0; padding-left: 18px; }}
ul.bullet li {{ margin: 6px 0; }}
.card {{
  background: #ffffff;
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 16px;
}}
.card-h {{ font-weight: 700; margin-bottom: 8px; color: #111; font-size: 16px; }}
.card-b p {{ margin: .5em 0; }}
.grid-cards {{
  display: grid; gap: 16px; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  margin-top: 8px;
}}
.sources a {{ color: var(--brand); text-decoration: none; }}
.sources a:hover {{ text-decoration: underline; }}
.muted {{ color: var(--muted); }}
footer.disclaimer {{
  margin-top: 24px; padding-top: 16px; border-top: 1px solid var(--border); color: #333;
}}
@media print {{
  body {{ background: #ffffff; color: #000000; }}
  .article {{ border-color: #bbbbbb; }}
}}
</style>
</head>
<body>
  <div class="container">
    <article class="article">
      <header>
        <h1 class="title">{escape(headline)}</h1>
        {"<div class='dek'>" + escape(dek) + "</div>" if dek else ""}
      </header>

      <section>
        <div class="section-h">–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã</div>
        {"<div class='card'>" + _list_to_ul(key_points) + "</div>" if key_points else "<p class='muted'>–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤</p>"}
      </section>

      <section>
        <div class="section-h">–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç</div>
        {main_variant_html or "<p class='muted'>–í–∞—Ä–∏–∞–Ω—Ç 'article_draft' –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω</p>"}
      </section>

      {"<section><div class='section-h'>–î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã</div>" + other_variants_html + "</section>" if other_variants_html else ""}

      {"<section><div class='section-h'>–ò–¥–µ–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π</div><div class='card'>" + _list_to_ul(vis_ideas) + "</div></section>" if vis_ideas else ""}

      <section>
        <div class="section-h">–ò—Å—Ç–æ—á–Ω–∏–∫–∏</div>
        <div class="card">{_render_sources(sources)}</div>
      </section>

      {"<section><div class='section-h'>–ö–æ–º–ø–ª–∞–µ–Ω—Å</div><div class='card'>" + _render_flags(flags) + "</div></section>" if flags else ""}

      {"<footer class='disclaimer'><strong>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</strong> " + escape(disclaimer) + "</footer>" if disclaimer else ""}
    </article>
  </div>
</body>
</html>
"""
    return html

def save_article_pdf(draft_dict: Dict, out_pdf: str = "article.pdf") -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF —á–µ—Ä–µ–∑ WeasyPrint; –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —á–µ—Ä–µ–∑ Playwright/Chromium."""
    html = render_article_html(draft_dict)

    # 1) –ü—Ä–æ–±—É–µ–º WeasyPrint (–ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è)
    try:
        from weasyprint import HTML  # –∏–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        HTML(string=html, base_url=str(Path.cwd())).write_pdf(out_pdf)
        return out_pdf
    except Exception as e:
        # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å e, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º ‚Äî –∏–¥—ë–º –≤ Playwright
        pass

    # 2) Fallback: Playwright/Chromium
    from playwright.sync_api import sync_playwright  # pip install playwright ; playwright install chromium

    tmp_html = Path("article_tmp.html")
    tmp_html.write_text(html, encoding="utf-8")

    with sync_playwright() as p:
        browser = p.chromium.launch()
        page = browser.new_page()
        page.goto(tmp_html.resolve().as_uri(), wait_until="load")
        page.pdf(
            path=out_pdf,
            format="A4",
            print_background=True,
            margin={"top": "10mm", "bottom": "12mm", "left": "10mm", "right": "10mm"},
        )
        browser.close()

    tmp_html.unlink(missing_ok=True)
    return out_pdf
