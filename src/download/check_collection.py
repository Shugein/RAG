#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Weaviate
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NewsChunks
"""

import weaviate
import json
from datetime import datetime
from collections import Counter


def connect_to_weaviate():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Weaviate"""
    try:
        client = weaviate.connect_to_local()
        if not client.is_ready():
            print("‚ùå Weaviate —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
            return None
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate —É—Å–ø–µ—à–Ω–æ")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate: {e}")
        return None


def check_collection_exists(client, collection_name="NewsChunks"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        exists = client.collections.exists(collection_name)
        if exists:
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        else:
            print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return False


def get_collection_schema(client, collection_name="NewsChunks"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        collection = client.collections.get(collection_name)
        config = collection.config.get()

        print(f"\nüìã –°—Ö–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {config.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {config.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")

        print("\n   üîß –°–≤–æ–π—Å—Ç–≤–∞:")
        for prop in config.properties:
            skip_vec = getattr(prop, 'skip_vectorization', None)
            vec_status = '–≤—ã–∫–ª—é—á–µ–Ω–∞' if skip_vec else '–≤–∫–ª—é—á–µ–Ω–∞' if skip_vec is not None else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            print(f"      ‚Ä¢ {prop.name}: {prop.data_type} (–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {vec_status})")

        print("\n   üéØ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        if config.vector_config:
            for vector_name, vector_config in config.vector_config.items():
                print(f"      ‚Ä¢ {vector_name}: {vector_config}")
        else:
            print("      –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False


def get_collection_stats(client, collection_name="NewsChunks"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        collection = client.collections.get(collection_name)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
        total_count = collection.aggregate.over_all().total_count
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_count}")

        if total_count == 0:
            print("   ‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è")
            return True

        # –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_size = min(100, total_count)
        response = collection.query.fetch_objects(limit=sample_size)

        if not response.objects:
            print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return True

        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = [obj.properties.get('source', 'Unknown') for obj in response.objects]
        source_counts = Counter(sources)

        print(f"\n   üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ {sample_size} –æ–±—ä–µ–∫—Ç–æ–≤):")
        for source, count in source_counts.most_common():
            print(f"      ‚Ä¢ {source}: {count} –æ–±—ä–µ–∫—Ç–æ–≤")

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        timestamps = [obj.properties.get('timestamp') for obj in response.objects if obj.properties.get('timestamp')]
        if timestamps:
            min_timestamp = min(timestamps)
            max_timestamp = max(timestamps)
            min_date = datetime.fromtimestamp(min_timestamp).strftime('%Y-%m-%d %H:%M:%S')
            max_date = datetime.fromtimestamp(max_timestamp).strftime('%Y-%m-%d %H:%M:%S')

            print(f"\n   ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö:")
            print(f"      ‚Ä¢ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: {min_date}")
            print(f"      ‚Ä¢ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {max_date}")

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞
        text_lengths = [len(obj.properties.get('original_text', '')) for obj in response.objects]
        if text_lengths:
            avg_length = sum(text_lengths) / len(text_lengths)
            min_length = min(text_lengths)
            max_length = max(text_lengths)

            print(f"\n   üìù –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤:")
            print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def test_search_functionality(client, collection_name="NewsChunks"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞"""
    try:
        collection = client.collections.get(collection_name)

        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")

        # –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        try:
            semantic_response = collection.query.near_text(
                query="–Ω–æ–≤–æ—Å—Ç–∏",
                limit=3
            )
            print(f"   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(semantic_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {e}")

        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (BM25)
        try:
            bm25_response = collection.query.bm25(
                query="–Ω–æ–≤–æ—Å—Ç–∏",
                limit=3
            )
            print(f"   ‚úÖ BM25 –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(bm25_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå BM25 –ø–æ–∏—Å–∫: {e}")

        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        try:
            from weaviate.classes.query import Filter
            filter_response = collection.query.fetch_objects(
                where=Filter.by_property("source").equal("buriy"),
                limit=3
            )
            print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(filter_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {e}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return False


def get_sample_objects(client, collection_name="NewsChunks", limit=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        collection = client.collections.get(collection_name)
        response = collection.query.fetch_objects(limit=limit)

        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")

        for i, obj in enumerate(response.objects, 1):
            print(f"\n   –û–±—ä–µ–∫—Ç {i}:")
            print(f"      ID: {obj.uuid}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            props = obj.properties
            print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {props.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')[:100]}...")
            print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {props.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"      URL: {props.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
            original_text = props.get('original_text', '')
            if original_text:
                preview = original_text[:200] + "..." if len(original_text) > 200 else original_text
                print(f"      –¢–µ–∫—Å—Ç: {preview}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º timestamp –µ—Å–ª–∏ –µ—Å—Ç—å
            timestamp = props.get('timestamp')
            if timestamp:
                date_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                print(f"      –î–∞—Ç–∞: {date_str}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        return False


def check_server_status(client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Weaviate"""
    try:
        print("\nüñ•Ô∏è  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ Weaviate:")

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        meta = client.get_meta()
        print(f"   –í–µ—Ä—Å–∏—è: {meta.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   –ú–æ–¥—É–ª–∏: {', '.join(meta.get('modules', {}).keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        if client.is_ready():
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Weaviate")
    print("=" * 50)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    client = connect_to_weaviate()
    if not client:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        check_server_status(client)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_name = "NewsChunks"
        if not check_collection_exists(client, collection_name):
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        get_collection_schema(client, collection_name)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        get_collection_stats(client, collection_name)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        test_search_functionality(client, collection_name)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        get_sample_objects(client, collection_name)

        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        client.close()


if __name__ == "__main__":
    main()