#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Weaviate
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NewsChunks
"""

import weaviate
import json
from datetime import datetime
from collections import Counter


def connect_to_weaviate():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Weaviate"""
    try:
        client = weaviate.connect_to_local()
        if not client.is_ready():
            print("‚ùå Weaviate —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
            return None
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate —É—Å–ø–µ—à–Ω–æ")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate: {e}")
        return None


def check_collection_exists(client, collection_name="NewsChunks"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        exists = client.collections.exists(collection_name)
        if exists:
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        else:
            print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return False


def get_collection_schema(client, collection_name="NewsChunks"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        collection = client.collections.get(collection_name)
        config = collection.config.get()

        print(f"\nüìã –°—Ö–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {config.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {config.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")

        print("\n   üîß –°–≤–æ–π—Å—Ç–≤–∞:")
        for prop in config.properties:
            skip_vec = getattr(prop, 'skip_vectorization', None)
            vec_status = '–≤—ã–∫–ª—é—á–µ–Ω–∞' if skip_vec else '–≤–∫–ª—é—á–µ–Ω–∞' if skip_vec is not None else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            print(f"      ‚Ä¢ {prop.name}: {prop.data_type} (–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {vec_status})")

        print("\n   üéØ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        if config.vector_config:
            for vector_name, vector_config in config.vector_config.items():
                print(f"      ‚Ä¢ {vector_name}: {vector_config}")
        else:
            print("      –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False


def get_collection_stats(client, collection_name="NewsChunks"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    try:
        collection = client.collections.get(collection_name)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
        total_count = collection.aggregate.over_all().total_count
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_count}")

        if total_count == 0:
            print("   ‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è")
            return True

        # –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_size = min(100, total_count)
        response = collection.query.fetch_objects(limit=sample_size)

        if not response.objects:
            print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return True

        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = [obj.properties.get('source', 'Unknown') for obj in response.objects]
        source_counts = Counter(sources)

        print(f"\n   üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ {sample_size} –æ–±—ä–µ–∫—Ç–æ–≤):")
        for source, count in source_counts.most_common():
            print(f"      ‚Ä¢ {source}: {count} –æ–±—ä–µ–∫—Ç–æ–≤")

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        timestamps = [obj.properties.get('timestamp') for obj in response.objects if obj.properties.get('timestamp')]
        if timestamps:
            min_timestamp = min(timestamps)
            max_timestamp = max(timestamps)
            min_date = datetime.fromtimestamp(min_timestamp).strftime('%Y-%m-%d %H:%M:%S')
            max_date = datetime.fromtimestamp(max_timestamp).strftime('%Y-%m-%d %H:%M:%S')

            print(f"\n   ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö:")
            print(f"      ‚Ä¢ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: {min_date}")
            print(f"      ‚Ä¢ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {max_date}")

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞
        text_lengths = [len(obj.properties.get('original_text', '')) for obj in response.objects]
        if text_lengths:
            avg_length = sum(text_lengths) / len(text_lengths)
            min_length = min(text_lengths)
            max_length = max(text_lengths)

            print(f"\n   üìù –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤:")
            print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def test_search_functionality(client, collection_name="NewsChunks"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞"""
    try:
        collection = client.collections.get(collection_name)

        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")

        # –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        try:
            semantic_response = collection.query.near_text(
                query="–Ω–æ–≤–æ—Å—Ç–∏",
                limit=3
            )
            print(f"   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(semantic_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {e}")

        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (BM25)
        try:
            bm25_response = collection.query.bm25(
                query="–Ω–æ–≤–æ—Å—Ç–∏",
                limit=3
            )
            print(f"   ‚úÖ BM25 –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(bm25_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå BM25 –ø–æ–∏—Å–∫: {e}")

        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        try:
            from weaviate.classes.query import Filter
            filter_response = collection.query.fetch_objects(
                where=Filter.by_property("source").equal("buriy"),
                limit=3
            )
            print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(filter_response.objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {e}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return False


def get_sample_objects(client, collection_name="NewsChunks", limit=2):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    try:
        collection = client.collections.get(collection_name)
        response = collection.query.fetch_objects(limit=limit)

        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}' (–ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ):")

        for i, obj in enumerate(response.objects, 1):
            print(f"\n{'='*80}")
            print(f"–û–ë–™–ï–ö–¢ {i}/{limit}")
            print(f"{'='*80}")
            print(f"UUID: {obj.uuid}")

            props = obj.properties

            # –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø
            print(f"\nüìå –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {props.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {props.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   URL: {props.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

            timestamp = props.get('timestamp')
            if timestamp:
                date_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                print(f"   Timestamp: {timestamp} ({date_str})")

            print(f"   Publication Date: {props.get('publication_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   Hotness: {props.get('hotness', 'N/A')}")

            # –¢–ï–ö–°–¢–û–í–´–ï –ü–û–õ–Ø
            print(f"\nüìù –¢–ï–ö–°–¢–û–í–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï:")
            original_text = props.get('original_text', '')
            if original_text:
                preview = original_text[:150] + "..." if len(original_text) > 150 else original_text
                print(f"   Original Text: {preview}")
                print(f"   –î–ª–∏–Ω–∞: {len(original_text)} —Å–∏–º–≤–æ–ª–æ–≤")

            text_for_bm25 = props.get('text_for_bm25', '')
            if text_for_bm25:
                preview_bm25 = text_for_bm25[:100] + "..." if len(text_for_bm25) > 100 else text_for_bm25
                print(f"   Text for BM25: {preview_bm25}")

            # –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ß–ê–ù–ö–û–í
            print(f"\nüîó –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ß–ê–ù–ö–ê:")
            print(f"   Parent Doc ID: {props.get('parent_doc_id', 'N/A')}")
            print(f"   Chunk Index: {props.get('chunk_index', 'N/A')}")
            parent_text = props.get('parent_doc_text', '')
            if parent_text:
                preview_parent = parent_text[:100] + "..." if len(parent_text) > 100 else parent_text
                print(f"   Parent Doc Text: {preview_parent}")

            # –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–£–©–ù–û–°–¢–ò
            print(f"\nüè¢ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–£–©–ù–û–°–¢–ò:")

            entities_json = props.get('entities_json', '')
            if entities_json:
                try:
                    entities = json.loads(entities_json)
                    print(f"   ‚úì Entities JSON –¥–æ—Å—Ç—É–ø–µ–Ω")

                    # –ö–æ–º–ø–∞–Ω–∏–∏
                    companies = props.get('companies', [])
                    if companies:
                        print(f"   –ö–æ–º–ø–∞–Ω–∏–∏ ({len(companies)}):")
                        for comp in companies:
                            print(f"      ‚Ä¢ {comp}")

                    company_tickers = props.get('company_tickers', [])
                    if company_tickers:
                        print(f"   –¢–∏–∫–µ—Ä—ã: {', '.join(company_tickers)}")

                    company_sectors = props.get('company_sectors', [])
                    if company_sectors:
                        print(f"   –°–µ–∫—Ç–æ—Ä—ã: {', '.join(company_sectors)}")

                    # –ü–µ—Ä—Å–æ–Ω—ã
                    people = props.get('people', [])
                    if people:
                        print(f"   –ü–µ—Ä—Å–æ–Ω—ã ({len(people)}):")
                        for person in people:
                            print(f"      ‚Ä¢ {person}")

                    people_positions = props.get('people_positions', [])
                    if people_positions:
                        print(f"   –î–æ–ª–∂–Ω–æ—Å—Ç–∏: {', '.join(people_positions)}")

                    # –†—ã–Ω–∫–∏
                    markets = props.get('markets', [])
                    if markets:
                        print(f"   –†—ã–Ω–∫–∏ ({len(markets)}):")
                        for market in markets:
                            print(f"      ‚Ä¢ {market}")

                    market_types = props.get('market_types', [])
                    if market_types:
                        print(f"   –¢–∏–ø—ã —Ä—ã–Ω–∫–æ–≤: {', '.join(market_types)}")

                    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    metric_types = props.get('financial_metric_types', [])
                    metric_values = props.get('financial_metric_values', [])
                    if metric_types or metric_values:
                        print(f"   –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ({len(metric_types)}):")
                        for mt, mv in zip(metric_types, metric_values):
                            print(f"      ‚Ä¢ {mt}: {mv}")

                    # –ü–æ–ª–Ω—ã–π JSON –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    print(f"\n   üìÑ –ü–æ–ª–Ω—ã–π JSON —Å—É—â–Ω–æ—Å—Ç–µ–π:")
                    print(f"   {json.dumps(entities, ensure_ascii=False, indent=6)}")

                except json.JSONDecodeError:
                    print(f"   ‚ö†Ô∏è  Entities JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è  –°—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")

            # –í–ï–ö–¢–û–†–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if hasattr(obj, 'vector') and obj.vector:
                print(f"\nüî¢ –í–ï–ö–¢–û–†–ù–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï:")
                print(f"   Vector dimension: {len(obj.vector)}")
                print(f"   First 5 values: {obj.vector[:5]}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False


def check_server_status(client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Weaviate"""
    try:
        print("\nüñ•Ô∏è  –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê WEAVIATE:")

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        meta = client.get_meta()
        print(f"   –í–µ—Ä—Å–∏—è: {meta.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   –ú–æ–¥—É–ª–∏: {', '.join(meta.get('modules', {}).keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        if client.is_ready():
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False


def list_all_collections(client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –ë–î"""
    try:
        print("\nüìö –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–õ–õ–ï–ö–¶–ò–ô –í –ë–î:")

        collections = client.collections.list_all()

        if not collections:
            print("   ‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True

        for coll_name, coll_config in collections.items():
            print(f"\n   üì¶ {coll_name}:")
            collection = client.collections.get(coll_name)
            total_count = collection.aggregate.over_all().total_count
            print(f"      ‚Ä¢ –û–±—ä–µ–∫—Ç–æ–≤: {total_count}")
            print(f"      ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {len(coll_config.properties)}")

            # –°–ø–∏—Å–æ–∫ —Å–≤–æ–π—Å—Ç–≤
            prop_names = [prop.name for prop in coll_config.properties]
            print(f"      ‚Ä¢ –ü–æ–ª—è: {', '.join(prop_names[:5])}" + ("..." if len(prop_names) > 5 else ""))

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• WEAVIATE")
    print("=" * 80)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    client = connect_to_weaviate()
    if not client:
        return

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        check_server_status(client)

        # 2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –ë–î
        list_all_collections(client)

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NewsChunks
        collection_name = "NewsChunks"
        print(f"\n{'='*80}")
        print(f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–õ–õ–ï–ö–¶–ò–ò '{collection_name}'")
        print(f"{'='*80}")

        if not check_collection_exists(client, collection_name):
            print(f"\n‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∑–∞–ø—É—Å–∫–æ–º vdb.py")
            return

        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        get_collection_schema(client, collection_name)

        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        get_collection_stats(client, collection_name)

        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        test_search_functionality(client, collection_name)

        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        get_sample_objects(client, collection_name, limit=2)

        print("\n" + "=" * 80)
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 80)

    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        client.close()


if __name__ == "__main__":
    main()