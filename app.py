"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
"""
import streamlit as st
import pandas as pd
import time
from Parser.src.system.engine import RAGPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG System Demo",
    page_icon="üîç",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'rag' not in st.session_state:
    st.session_state.rag = RAGPipeline()
    with st.spinner('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate...'):
        st.session_state.rag.connect()
    st.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Weaviate!')

if 'history' not in st.session_state:
    st.session_state.history = []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üîç RAG System - –ü–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
st.markdown("---")

# Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    search_limit = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",
        min_value=5,
        max_value=20,
        value=10,
        help="–°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Ö–æ–¥–µ"
    )

    rerank_limit = st.slider(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞",
        min_value=1,
        max_value=10,
        value=3,
        help="–¢–æ–ø-N –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
    )

    reasoning_level = st.selectbox(
        "–£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π LLM",
        options=["low", "medium", "high"],
        index=0,
        help="–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
    )

    use_parent_docs = st.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        value=True,
        help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, retriever –≤–µ—Ä–Ω–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ —á–∞–Ω–∫–∞. –î—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è."
    )

    st.markdown("---")
    st.markdown("### üìä –ú–æ–¥–µ–ª–∏")
    st.markdown("""
    - **–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**: sergeyzh/BERTA
    - **–†–µ—Ä–µ–Ω–∫–∏–Ω–≥**: BAAI/bge-reranker-v2-m3
    - **LLM**: openai/gpt-oss-20b:free
    """)

    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        st.session_state.history = []
        st.rerun()

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")

    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    example_queries = [
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞",
        "–ù–æ–≤–æ—Å—Ç–∏ –æ —Å–ø–æ—Ä—Ç–µ",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"
    ]

    st.markdown("**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**")
    example_cols = st.columns(len(example_queries))
    for i, example in enumerate(example_queries):
        if example_cols[i].button(f"üìù {example}", key=f"example_{i}"):
            st.session_state.current_query = example

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    user_query = st.text_area(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
        value=st.session_state.get('current_query', ''),
        height=100,
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."
    )

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    if st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
        if user_query.strip():
            with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...'):
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
                result = st.session_state.rag.query(
                    user_query=user_query,
                    search_limit=search_limit,
                    rerank_limit=rerank_limit,
                    reasoning_level=reasoning_level,
                    use_parent_docs=use_parent_docs
                )

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.history.insert(0, {
                    'timestamp': time.strftime('%H:%M:%S'),
                    'query': user_query,
                    'result': result
                })

                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
                st.session_state.current_query = ''
                st.rerun()
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")

with col2:
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    if st.session_state.history:
        last_result = st.session_state.history[0]['result']
        metadata = last_result['metadata']

        st.metric("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{metadata['total_time']:.2f}s")
        st.metric("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ", metadata['num_documents'])
    else:
        st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
st.markdown("---")

if st.session_state.history:
    latest = st.session_state.history[0]
    result = latest['result']

    st.header("‚úÖ –û—Ç–≤–µ—Ç")
    st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {result['query']}")

    # –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    with st.container():
        st.markdown("### ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        st.info(result['answer'])

    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    st.markdown("---")
    st.header("üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    st.markdown("### üîç –≠—Ç–∞–ø 1: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–æ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞)")
    if 'documents' in result and result['documents']:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –¥–æ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞
        st.caption("–ü–µ—Ä–≤–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (BM25 + –≤–µ–∫—Ç–æ—Ä–Ω—ã–π)")

    st.markdown("### üéØ –≠—Ç–∞–ø 2: –ü–æ—Å–ª–µ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞")

    for i, doc in enumerate(result['documents'], 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_icon = "üîπ" if doc.get('text_type') == 'parent_document' else "üìÑ"
        doc_type_label = "–ü–æ–ª–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" if doc.get('text_type') == 'parent_document' else "–ß–∞–Ω–∫"

        with st.expander(f"{doc_type_icon} –î–æ–∫—É–º–µ–Ω—Ç #{i}: {doc['title']}", expanded=(i == 1)):
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if doc.get('text_type') == 'parent_document':
                st.info(f"üìñ {doc_type_label} (–ø–æ–ª—É—á–µ–Ω –∏–∑ —á–∞–Ω–∫–∞ #{doc.get('chunk_index', '?')})")
            else:
                st.info(f"üìÑ {doc_type_label} #{doc.get('chunk_index', '?')}")

            col_a, col_b, col_c = st.columns([2, 1, 1])

            with col_a:
                st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {doc['source']}")
                st.markdown(f"**URL:** {doc.get('url', 'N/A')}")
                if doc.get('text_type') == 'parent_document':
                    st.markdown(f"**–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {len(doc['text']):,} —Å–∏–º–≤–æ–ª–æ–≤")

            with col_b:
                st.metric(
                    "Hybrid Score",
                    f"{doc.get('hybrid_score', 0):.4f}",
                    help="–û—Ü–µ–Ω–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"
                )

            with col_c:
                st.metric(
                    "Rerank Score",
                    f"{doc['rerank_score']:.4f}",
                    delta=f"{doc['rerank_score'] - doc.get('hybrid_score', 0):.4f}",
                    help="–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞"
                )

            # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏
            if 'original_position' in doc and 'new_position' in doc:
                position_change = doc['original_position'] - doc['new_position']
                if position_change > 0:
                    st.success(f"üî∫ –ü–æ–¥–Ω—è–ª—Å—è —Å #{doc['original_position']} –Ω–∞ #{doc['new_position']} (+{position_change} –º–µ—Å—Ç)")
                elif position_change < 0:
                    st.error(f"üîª –û–ø—É—Å—Ç–∏–ª—Å—è —Å #{doc['original_position']} –Ω–∞ #{doc['new_position']} ({position_change} –º–µ—Å—Ç)")
                else:
                    st.info(f"‚û°Ô∏è –ü–æ–∑–∏—Ü–∏—è #{doc['new_position']} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–ª –∫ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            if doc.get('text_type') == 'parent_document' and 'chunk_text' in doc:
                st.markdown("**üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (chunk):**")
                st.markdown(f"```\n{doc['chunk_text'][:300]}...\n```")

                with st.expander("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç"):
                    st.text_area(
                        "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                        value=doc['text'],
                        height=400,
                        disabled=True,
                        key=f"full_doc_{i}"
                    )
            else:
                # –¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞
                st.markdown("**–¢–µ–∫—Å—Ç:**")
                st.markdown(f"```\n{doc['text'][:500]}...\n```")

    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è scores
    st.markdown("---")
    st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ä–µ–Ω–∫–∏–Ω–≥–∞")

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    chart_data = []
    for i, doc in enumerate(result['documents'], 1):
        chart_data.append({
            '–î–æ–∫—É–º–µ–Ω—Ç': f"Doc #{i}",
            'Hybrid Score': doc.get('hybrid_score', 0),
            'Rerank Score': doc['rerank_score']
        })

    df = pd.DataFrame(chart_data)
    df_melted = df.melt(id_vars=['–î–æ–∫—É–º–µ–Ω—Ç'], var_name='–¢–∏–ø Score', value_name='–ó–Ω–∞—á–µ–Ω–∏–µ')

    st.bar_chart(df_melted.pivot(index='–î–æ–∫—É–º–µ–Ω—Ç', columns='–¢–∏–ø Score', values='–ó–Ω–∞—á–µ–Ω–∏–µ'))

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
if len(st.session_state.history) > 1:
    st.markdown("---")
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

    for i, item in enumerate(st.session_state.history[1:6], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        with st.expander(f"‚è∞ {item['timestamp']} - {item['query'][:50]}..."):
            st.markdown(f"**–û—Ç–≤–µ—Ç:** {item['result']['answer'][:200]}...")
            st.markdown(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {len(item['result']['documents'])}")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>RAG System powered by Weaviate, BERTA, BGE-Reranker, and OpenRouter</p>
</div>
""", unsafe_allow_html=True)
