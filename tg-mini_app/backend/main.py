#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RADAR Finance Mini App - Backend API Server
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è Mini App –∏ API endpoints —Å –∑–∞–≥–ª—É—à–∫–æ–π RADAR —Ñ—É–Ω–∫—Ü–∏–∏
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
from datetime import datetime
import os
import json
from pathlib import Path
from typing import Dict, Any
import uvicorn

class RADARMockProcessor:    
    def __init__(self):
        self.mock_news_data = [
            {
                "id": "1",
                "title": "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —Ç—Ä–µ—Ç–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
                "content": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ —Å–æ–æ–±—â–∏–ª –æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 424 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –∑–∞ 9 –º–µ—Å—è—Ü–µ–≤ 2025 –≥–æ–¥–∞, —á—Ç–æ –Ω–∞ 15% –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞. –†–æ—Å—Ç –æ–±—É—Å–ª–æ–≤–ª–µ–Ω —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–æ–≤ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏.",
                "source": "RBC",
                "published_dt": "04.10.2025 15:30",
                "estimated_importance": 0.95,
                "sector": "banks",
                "url": "https://example.com/news1"
            },
            {
                "id": "2", 
                "title": "‚ö° –ì–∞–∑–ø—Ä–æ–º –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –≥–∞–∑–∞ –≤ –ê–∑–∏—é",
                "content": "–ü–ê–û '–ì–∞–∑–ø—Ä–æ–º' –∑–∞–∫–ª—é—á–∏–ª–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å —Ç—Ä–µ–º—è –∫—Ä—É–ø–Ω—ã–º–∏ –∞–∑–∏–∞—Ç—Å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –≥–∞–∑–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Å–≤—ã—à–µ $50 –º–ª—Ä–¥. –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥ –¥–æ 2030 –≥–æ–¥–∞ –∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ '–°–∏–ª—É –°–∏–±–∏—Ä–∏-2'.",
                "source": "–í–µ–¥–æ–º–æ—Å—Ç–∏",
                "published_dt": "04.10.2025 14:15",
                "estimated_importance": 0.87,
                "sector": "energy",
                "url": "https://example.com/news2"
            },
            {
                "id": "3",
                "title": "üí∞ –¶–ë –†–§ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 21% –≥–æ–¥–æ–≤—ã—Ö",
                "content": "–°–æ–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤—ã—Å–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ 200 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ 21% –≥–æ–¥–æ–≤—ã—Ö. –†–µ—à–µ–Ω–∏–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è.",
                "source": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç",
                "published_dt": "04.10.2025 12:00",
                "estimated_importance": 0.92,
                "sector": "macroeconomics",
                "url": "https://example.com/news3"
            },
            {
                "id": "4",
                "title": "üîÑ –í–¢–ë –∑–∞–ø—É—Å—Ç–∏–ª –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è",
                "content": "–ë–∞–Ω–∫ –í–¢–ë –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª –∑–∞–ø—É—Å–∫ –ª—å–≥–æ—Ç–Ω–æ–π –∏–ø–æ—Ç–µ—á–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –æ—Ç 12% –≥–æ–¥–æ–≤—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–∏–ª—å—è –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ 2025 –≥–æ–¥–∞.",
                "source": "–†–ë–ö",
                "published_dt": "04.10.2025 11:45",
                "estimated_importance": 0.71,
                "sector": "banks",
                "url": "https://example.com/news4"
            },
            {
                "id": "5",
                "title": "üè≠ –õ—É–∫–æ–π–ª —É–≤–µ–ª–∏—á–∏–ª –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –Ω–∞ 25%",
                "content": "–ù–µ—Ñ—Ç—è–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è '–õ—É–∫–æ–π–ª' –æ–±—ä—è–≤–∏–ª–∞ –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–ª–æ–≤–ª–æ–∂–µ–Ω–∏–π –≤ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö –∑–∞–≤–æ–¥–æ–≤. –û–±—â–∏–π –æ–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ 2025 –≥–æ–¥—É —Å–æ—Å—Ç–∞–≤–∏—Ç 180 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π.",
                "source": "–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å",
                "published_dt": "04.10.2025 10:20",
                "estimated_importance": 0.78,
                "sector": "energy",
                "url": "https://example.com/news5"
            },
            {
                "id": "6",
                "title": "üì± –ú–¢–° –∑–∞–ø—É—Å–∫–∞–µ—Ç 5G —Å–µ—Ç—å –≤ 15 —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏",
                "content": "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ú–¢–° –æ–±—ä—è–≤–∏–ª–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–µ—Ç–µ–π –ø—è—Ç–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –≤ 15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç —Å–æ—Å—Ç–∞–≤—è—Ç 45 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π.",
                "source": "–í–µ–¥–æ–º–æ—Å—Ç–∏",
                "published_dt": "04.10.2025 09:15",
                "estimated_importance": 0.68,
                "sector": "telecom",
                "url": "https://example.com/news6"
            }
        ]
        
        self.mock_edisclosure_data = [
            {
                "id": "e1",
                "company_info": {"name": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫"},
                "event_description": "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤",
                "date": "03.10.2025",
                "full_content": "–°–æ–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 22 —Ä—É–±–ª–µ–π –Ω–∞ –∞–∫—Ü–∏—é. –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: 15.10.2025.",
                "sector": "banks"
            },
            {
                "id": "e2", 
                "company_info": {"name": "–ü–ê–û –ì–∞–∑–ø—Ä–æ–º"},
                "event_description": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ –ü—Ä–∞–≤–ª–µ–Ω–∏—è",
                "date": "02.10.2025",
                "full_content": "–í —Å–æ—Å—Ç–∞–≤ –ü—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ê–û –ì–∞–∑–ø—Ä–æ–º –≤–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π —á–ª–µ–Ω - –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.",
                "sector": "energy"
            }
        ]
    
    def process_user_query(self, query_text: str, query_type: str = "general", sector: str = "all") -> Dict[str, Any]:
        print(f"[MOCK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{query_text}'")
        print(f"[MOCK] –¢–∏–ø: {query_type}, –°–µ–∫—Ç–æ—Ä: {sector}")
        
        filtered_news = self._filter_by_sector(self.mock_news_data, sector)
        filtered_edisclosure = self._filter_by_sector(self.mock_edisclosure_data, sector)
        
        if query_type == "draft":
            results = self._generate_draft(filtered_news, filtered_edisclosure, sector)
        elif query_type == "hot":
            results = self._get_hot_news(filtered_news, filtered_edisclosure, sector)
        elif query_type == "analytics":
            results = self._generate_analytics(filtered_news, filtered_edisclosure, sector)
        else:
            results = self._general_search(filtered_news, filtered_edisclosure, query_text, sector)
        
        response = {
            "status": "success",
            "query": {
                "text": query_text,
                "type": query_type,
                "sector": sector,
                "processed_at": datetime.now().isoformat()
            },
            "statistics": {
                "total_sources": len(set([item.get('source') for item in filtered_news if item.get('source')])),
                "total_news": len(filtered_news),
                "total_edisclosure": len(filtered_edisclosure),
                "processing_time_ms": 250
            },
            "results": results,
            "visualization": {
                "charts": self._generate_charts_data(filtered_news, sector),
                "timeline": self._generate_timeline(filtered_news),
                "sectors_breakdown": self._get_sectors_breakdown(filtered_news)
            }
        }
        return response
    
    def _filter_by_sector(self, data, sector):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–∫—Ç–æ—Ä—É"""
        if sector == "all":
            return data
            
        sector_mapping = {
            "banking": "banks",
            "banks": "banks", 
            "energy": "energy",
            "tech": "telecom",
            "it": "telecom"
        }
        
        target_sector = sector_mapping.get(sector, sector)
        return [item for item in data if item.get('sector') == target_sector]
    
    def _generate_draft(self, news_data, edisclosure_data, sector):
        hot_news = sorted(news_data, key=lambda x: float(x.get('estimated_importance', 0)), reverse=True)[:5]
        
        return {
            "title": f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫: {sector}",
            "summary": f"–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä—É {sector} –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏ {len(edisclosure_data)} –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
            "key_points": [
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(hot_news)} –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
                f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {len(edisclosure_data)} –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", 
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(set([n.get('source') for n in news_data]))} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë",
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏"
            ],
            "hot_news": [
                {
                    "id": news.get('id'),
                    "title": news.get('title', ''),
                    "source": news.get('source', ''),
                    "importance": float(news.get('estimated_importance', 0)),
                    "date": news.get('published_dt', ''),
                    "summary": news.get('content', '')[:200] + "..."
                }
                for news in hot_news
            ],
            "corporate_events": [
                {
                    "id": event.get('id'),
                    "company": event.get('company_info', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'),
                    "event_type": event.get('event_description', ''),
                    "date": event.get('date', ''),
                    "summary": event.get('full_content', '')[:150] + "..." if event.get('full_content') else ''
                }
                for event in edisclosure_data
            ],
            "recommendations": [
                f"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è–º –≤ —Å–µ–∫—Ç–æ—Ä–µ {sector}",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¶–ë",
                "–°–ª–µ–¥—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Ä—ã–Ω–∫–∞",
                "–í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Ç—Ä–∞—Å–ª—å"
            ]
        }
    
    def _get_hot_news(self, news_data, edisclosure_data, sector):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        hot_news = sorted(news_data, key=lambda x: float(x.get('estimated_importance', 0)), reverse=True)
        
        return {
            "title": f"–ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {sector}",
            "total_found": len(hot_news),
            "news": [
                {
                    "id": news.get('id'),
                    "title": news.get('title', ''),
                    "content": news.get('content', '')[:300] + "...",
                    "source": news.get('source', ''),
                    "hotness_score": float(news.get('estimated_importance', 0)),
                    "published_dt": news.get('published_dt', ''),
                    "url": news.get('url', ''),
                    "sector": sector,
                    "tags": self._extract_tags(news.get('title', '') + ' ' + news.get('content', ''))
                }
                for news in hot_news
            ]
        }
    
    def _generate_analytics(self, news_data, edisclosure_data, sector):
        sources_count = {}
        for news in news_data:
            source = news.get('source', 'unknown')
            sources_count[source] = sources_count.get(source, 0) + 1
        
        return {
            "title": f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç: {sector}",
            "period": "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
            "metrics": {
                "total_news": len(news_data),
                "total_sources": len(sources_count),
                "avg_importance": sum(float(n.get('estimated_importance', 0)) for n in news_data) / len(news_data) if news_data else 0,
                "total_edisclosure": len(edisclosure_data)
            },
            "sources_breakdown": [
                {"source": source, "count": count, "percentage": round(count/len(news_data)*100, 1)}
                for source, count in sorted(sources_count.items(), key=lambda x: x[1], reverse=True)
            ],
            "timeline": [
                {"date": "04.10.2025", "count": len(news_data)},
                {"date": "03.10.2025", "count": max(1, len(news_data) - 2)},
                {"date": "02.10.2025", "count": max(1, len(news_data) - 3)}
            ],
            "top_news": [
                {
                    "title": news.get('title', ''),
                    "importance": float(news.get('estimated_importance', 0)),
                    "source": news.get('source', ''),
                    "date": news.get('published_dt', '')
                }
                for news in sorted(news_data, key=lambda x: float(x.get('estimated_importance', 0)), reverse=True)[:10]
            ]
        }
    
    def _general_search(self, news_data, edisclosure_data, query, sector):
        query_words = query.lower().split()
        
        relevant_news = []
        for news in news_data:
            title = news.get('title', '').lower()
            content = news.get('content', '').lower()
            
            relevance = 0
            for word in query_words:
                if word in title:
                    relevance += 2
                if word in content:
                    relevance += 1
            
            if relevance > 0:
                news_copy = news.copy()
                news_copy['relevance'] = relevance
                relevant_news.append(news_copy)
        
        relevant_news.sort(key=lambda x: x['relevance'], reverse=True)
        
        return {
            "title": f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'",
            "query": query,
            "sector": sector,
            "total_found": len(relevant_news),
            "results": [
                {
                    "id": news.get('id'),
                    "title": news.get('title', ''),
                    "content": news.get('content', '')[:250] + "...",
                    "source": news.get('source', ''),
                    "relevance": news.get('relevance', 0),
                    "importance": float(news.get('estimated_importance', 0)),
                    "published_dt": news.get('published_dt', ''),
                    "highlights": news.get('title', '')  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                }
                for news in relevant_news
            ]
        }
    
    def _extract_tags(self, text):
        common_tags = ['–±–∞–Ω–∫–∏', '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Ä—ã–Ω–æ–∫', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–ø—Ä–∏–±—ã–ª—å', '–¥–∏–≤–∏–¥–µ–Ω–¥—ã']
        text_lower = text.lower()
        found_tags = [tag for tag in common_tags if tag in text_lower]
        return found_tags[:3]
    
    def _generate_charts_data(self, news_data, sector):
        sources = {}
        for news in news_data:
            source = news.get('source', 'unknown')
            sources[source] = sources.get(source, 0) + 1
        
        return {
            "sources_pie": {
                "labels": list(sources.keys()),
                "data": list(sources.values()),
                "colors": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"]
            }
        }
    
    def _generate_timeline(self, news_data):
        return [
            {"date": "04.10.2025", "count": len(news_data)},
            {"date": "03.10.2025", "count": max(1, len(news_data) - 1)},
            {"date": "02.10.2025", "count": max(1, len(news_data) - 2)}
        ]
    
    def _get_sectors_breakdown(self, news_data):
        sectors = {"–ë–∞–Ω–∫–∏": 0, "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": 0, "–¢–µ–ª–µ–∫–æ–º": 0, "–î—Ä—É–≥–æ–µ": 0}
        
        for news in news_data:
            sector = news.get('sector', 'other')
            if sector == 'banks':
                sectors["–ë–∞–Ω–∫–∏"] += 1
            elif sector == 'energy':
                sectors["–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"] += 1
            elif sector == 'telecom':
                sectors["–¢–µ–ª–µ–∫–æ–º"] += 1
            else:
                sectors["–î—Ä—É–≥–æ–µ"] += 1
        
        return sectors

radar_processor = RADARMockProcessor()

app = FastAPI(
    title="RADAR Finance Mini App API",
    description="API –¥–ª—è Telegram Mini App —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ RADAR",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

frontend_path = Path(__file__).parent.parent / "frontend"
if frontend_path.exists():
    app.mount("/static", StaticFiles(directory=str(frontend_path)), name="static")
    
    @app.get("/")
    async def serve_index():
        index_path = frontend_path / "index-clean.html"
        if index_path.exists():
            return FileResponse(str(index_path))
        fallback_path = frontend_path / "index.html"
        if fallback_path.exists():
            return FileResponse(str(fallback_path))
        return {"message": "Frontend –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    @app.get("/js/{filename}")
    async def serve_js(filename: str):
        js_path = frontend_path / "js" / filename
        if js_path.exists():
            return FileResponse(str(js_path), media_type="application/javascript")
        raise HTTPException(status_code=404, detail="File not found")

SAMPLE_DATA = {
    "dashboard": {
        "totalNews": 1507,
        "hotNewsToday": 12,
        "totalSources": 6,
        "lastUpdate": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "topNews": [
            {
                "id": "1",
                "title": "–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏",
                "source": "RBC",
                "hotness_score": 0.95,
                "published_dt": "03.10.2025"
            },
            {
                "id": "2",
                "title": "–ì–∞–∑–ø—Ä–æ–º —Ä–∞—Å—à–∏—Ä—è–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –ê–∑–∏—é",
                "source": "–í–µ–¥–æ–º–æ—Å—Ç–∏",
                "hotness_score": 0.87,
                "published_dt": "03.10.2025"
            }
        ]
    }
}


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

@app.get("/api/dashboard")
async def get_dashboard():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        data = SAMPLE_DATA["dashboard"].copy()
        data["lastUpdate"] = datetime.now().strftime("%d.%m.%Y %H:%M")
        return data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")

@app.get("/api/hot-news")
async def get_hot_news(limit: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        hot_news = [
            {
                "id": "1",
                "title": "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª",
                "content": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 15%. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –±–∞–Ω–∫–∞ –æ—Ç–º–µ—á–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤–æ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –±–∏–∑–Ω–µ—Å–∞, –≤–∫–ª—é—á–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏ —Ä–æ–∑–Ω–∏—á–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ.",
                "source": "RBC",
                "published_dt": "03.10.2025 15:30",
                "hotness_score": 0.95
            },
            {
                "id": "2",
                "title": "üè≠ –ì–∞–∑–ø—Ä–æ–º —Ä–∞—Å—à–∏—Ä—è–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ —ç–Ω–µ—Ä–≥–æ–Ω–æ—Å–∏—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–∞–Ω—ã –ê–∑–∏–∏",
                "content": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≥–∏–≥–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –≥–∞–∑–∞ —Å —Ç—Ä–µ–º—è –∫—Ä—É–ø–Ω—ã–º–∏ –∞–∑–∏–∞—Ç—Å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç $50 –º–ª—Ä–¥ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –¥–æ 2030 –≥–æ–¥–∞.",
                "source": "–í–µ–¥–æ–º–æ—Å—Ç–∏",
                "published_dt": "03.10.2025 14:15",
                "hotness_score": 0.87
            },
            {
                "id": "3",
                "title": "üí∞ –¶–ë –†–§ –∏–∑–º–µ–Ω–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 21%",
                "content": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ 200 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å–∏–ª–∏–≤–∞—é—â–∏–µ—Å—è –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏.",
                "source": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç",
                "published_dt": "03.10.2025 12:00",
                "hotness_score": 0.83
            }
        ]
        
        return {"news": hot_news[:limit]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")

@app.get("/api/search") 
async def search_news(q: str, limit: int = 20):
    """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        if not q:
            raise HTTPException(status_code=400, detail="–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ 'q' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        results = [
            {
                "id": "1",
                "title": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{q}'",
                "content": f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '{q}' –≤ —Ç–µ–∫—Å—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏...",
                "source": "RBC",
                "published_dt": "02.10.2025",
                "relevance": 0.9
            }
        ]
        
        return {
            "query": q,
            "results": results[:limit],
            "total": len(results)
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@app.get("/api/statistics")
async def get_statistics():
    try:
        return {
            "sources": {
                "RBC": 118,
                "–í–µ–¥–æ–º–æ—Å—Ç–∏": 281,
                "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç": 69,
                "MOEX": 45,
                "–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å": 94,
                "E-disclosure": 150
            },
            "dates": {
                "today": 12,
                "week": 89,
                "month": 456
            },
            "companies": {
                "–°–±–µ—Ä–±–∞–Ω–∫": 23,
                "–ì–∞–∑–ø—Ä–æ–º": 18,
                "–õ—É–∫–æ–π–ª": 15,
                "–í–¢–ë": 12,
                "–†–æ—Å–Ω–µ—Ñ—Ç—å": 10
            },
            "categories": {
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä": 95,
                "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": 87,
                "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": 43,
                "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": 35
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.get("/api/e-disclosure/news")
async def get_edisclosure_news(limit: int = 20):
    try:
        return {
            "news": [
                {
                    "id": "1",
                    "title": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ - –≤—ã–ø–ª–∞—Ç–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤",
                    "company": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫",
                    "date": "03.10.2025",
                    "content": "–°–æ–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤...",
                    "event_type": "dividend_payment"
                },
                {
                    "id": "2", 
                    "title": "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ",
                    "company": "–ü–ê–û –ì–∞–∑–ø—Ä–æ–º",
                    "date": "03.10.2025",
                    "content": "–í —Å–æ—Å—Ç–∞–≤–µ –ü—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ê–û –ì–∞–∑–ø—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è...",
                    "event_type": "management_change"
                }
            ][:limit]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è E-disclosure –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")

@app.get("/api/e-disclosure/messages")
async def get_edisclosure_messages(limit: int = 20):
    try:
        return {
            "messages": [
                {
                    "id": "1",
                    "company": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫",
                    "event_type": "–í—ã–ø–ª–∞—Ç–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤",
                    "date": "03.10.2025 15:30",
                    "content": "–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ –≤—ã–ø–ª–∞—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤...",
                    "full_content": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤, –¥–∞—Ç–∞—Ö –≤—ã–ø–ª–∞—Ç –∏ —Ä–µ–µ—Å—Ç—Ä–∞—Ö –∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤..."
                },
                {
                    "id": "2",
                    "company": "–ü–ê–û –ì–∞–∑–ø—Ä–æ–º", 
                    "event_type": "–°–æ–±—Ä–∞–Ω–∏–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤",
                    "date": "03.10.2025 14:15",
                    "content": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è –∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤...",
                    "full_content": "–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è, –ø–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–∏—è, —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è..."
                }
            ][:limit]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è E-disclosure —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

@app.post("/api/process_query")
async def process_radar_query(query_data: dict):
    try:
        query_text = query_data.get("query", "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query_text}'")
        
        result = {
            'query': query_text,
            'answer': '–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ.',
            'documents': [
                {
                    'title': '–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–∫–∞–∑–∞–ª —Ä–µ–∫–æ—Ä–¥–Ω—É—é –ø—Ä–∏–±—ã–ª—å',
                    'source': 'RBC',
                    'text': '–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —Ç—Ä–µ—Ç–∏–π –∫–≤–∞—Ä—Ç–∞–ª 2025 –≥–æ–¥–∞. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –±–∞–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 350 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π.',
                    'chunk_text': '–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —Ç—Ä–µ—Ç–∏–π –∫–≤–∞—Ä—Ç–∞–ª 2025 –≥–æ–¥–∞. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –±–∞–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 350 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π.',
                    'url': 'https://example.com/news/sberbank',
                    'timestamp': 1728000000,
                    'hybrid_score': 0.89,
                    'rerank_score': 0.89,
                    'original_position': 1,
                    'new_position': 1,
                    'chunk_index': 0,
                    'parent_doc_id': 'sber-001',
                    'text_type': 'parent_document'
                },
                {
                    'title': '–¶–ë –†–§ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É',
                    'source': '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç',
                    'text': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤—ã—Å–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 21% –≥–æ–¥–æ–≤—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏.',
                    'chunk_text': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤—ã—Å–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 21% –≥–æ–¥–æ–≤—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏.',  
                    'url': 'https://example.com/news/cbr',
                    'timestamp': 1727950000,
                    'hybrid_score': 0.76,
                    'rerank_score': 0.76,
                    'original_position': 2,
                    'new_position': 2,
                    'chunk_index': 0,
                    'parent_doc_id': 'cbr-001',
                    'text_type': 'parent_document'
                },
                {
                    'title': '–ì–∞–∑–ø—Ä–æ–º –∑–∞–∫–ª—é—á–∏–ª –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã',
                    'source': '–í–µ–¥–æ–º–æ—Å—Ç–∏',
                    'text': '–ì–∞–∑–ø—Ä–æ–º –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –≥–∞–∑–∞ –≤ —Å—Ç—Ä–∞–Ω—ã –ê–∑–∏–∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 45 –º–ª—Ä–¥ –¥–æ–ª–ª–∞—Ä–æ–≤.',
                    'chunk_text': '–ì–∞–∑–ø—Ä–æ–º –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –≥–∞–∑–∞ –≤ —Å—Ç—Ä–∞–Ω—ã –ê–∑–∏–∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 45 –º–ª—Ä–¥ –¥–æ–ª–ª–∞—Ä–æ–≤.',
                    'url': 'https://example.com/news/gazprom',
                    'timestamp': 1727900000,
                    'hybrid_score': 0.68,
                    'rerank_score': 0.68,
                    'original_position': 3,
                    'new_position': 3,
                    'chunk_index': 0,
                    'parent_doc_id': 'gaz-001',
                    'text_type': 'parent_document'
                }
            ],
            'metadata': {
                'total_time': 2.3,
                'num_documents': 3,
                'vectorizer': 'sergeyzh/BERTA',
                'reranker': 'BAAI/bge-reranker-v2-m3',
                'llm_model': 'openai/gpt-4',
                'use_parent_docs': True
            }
        }
        
        print(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.get("/api/sectors")
async def get_available_sectors():
    return {
        "sectors": [
            {"id": "all", "name": "–í—Å–µ —Å–µ–∫—Ç–æ—Ä–∞", "emoji": "üåê", "description": "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"},
            {"id": "banking", "name": "–ë–∞–Ω–∫–∏", "emoji": "üè¶", "description": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä"},
            {"id": "energy", "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "emoji": "‚ö°", "description": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä"},
            {"id": "tech", "name": "IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "emoji": "üíª", "description": "IT –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"},
            {"id": "metals", "name": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è", "emoji": "üè≠", "description": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å"},
            {"id": "retail", "name": "–†–∏—Ç–µ–π–ª", "emoji": "üõí", "description": "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"},
        ]
    }

@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(exc) if app.debug else None
        }
    )

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("–ó–∞–ø—É—Å–∫ RADAR Finance Mini App API Server")
    print("=" * 50)
    print("Frontend: http://127.0.0.1:8000")
    print("API: http://127.0.0.1:8000/api/")
    print("Health: http://127.0.0.1:8000/api/health")
    print("Docs: http://127.0.0.1:8000/docs")
    print("Process Query: http://127.0.0.1:8000/api/process_query")
    print("=" * 50)
    print("RADAR —Ñ—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ (MOCK —Ä–µ–∂–∏–º)")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
    
    uvicorn.run(
        app,
        host="127.0.0.1",
        port=8000,
        log_level="info",
        access_log=True
    )

if __name__ == "__main__":
    main()